
hello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004008  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004118  08004118  00014118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004184  08004184  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004184  08004184  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004184  08004184  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004184  08004184  00014184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004188  08004188  00014188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800418c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019b4  20000010  0800419c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019c4  0800419c  000219c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d01  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029e5  00000000  00000000  00031d3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  00034720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f70  00000000  00000000  000357b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000025b9  00000000  00000000  00036728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a83  00000000  00000000  00038ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e654  00000000  00000000  0004c764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dadb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044fc  00000000  00000000  000dae08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004100 	.word	0x08004100

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004100 	.word	0x08004100

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 f994 	bl	8000480 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f816 	bl	8000188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f850 	bl	8000200 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000160:	f001 fabe 	bl	80016e0 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <main+0x2c>)
 8000166:	2100      	movs	r1, #0
 8000168:	4805      	ldr	r0, [pc, #20]	; (8000180 <main+0x30>)
 800016a:	f001 fb1f 	bl	80017ac <osThreadNew>
 800016e:	4603      	mov	r3, r0
 8000170:	4a04      	ldr	r2, [pc, #16]	; (8000184 <main+0x34>)
 8000172:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000174:	f001 fae6 	bl	8001744 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000178:	e7fe      	b.n	8000178 <main+0x28>
 800017a:	bf00      	nop
 800017c:	08004148 	.word	0x08004148
 8000180:	08000265 	.word	0x08000265
 8000184:	2000002c 	.word	0x2000002c

08000188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b090      	sub	sp, #64	; 0x40
 800018c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800018e:	f107 0318 	add.w	r3, r7, #24
 8000192:	2228      	movs	r2, #40	; 0x28
 8000194:	2100      	movs	r1, #0
 8000196:	4618      	mov	r0, r3
 8000198:	f003 ffaa 	bl	80040f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800019c:	1d3b      	adds	r3, r7, #4
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	605a      	str	r2, [r3, #4]
 80001a4:	609a      	str	r2, [r3, #8]
 80001a6:	60da      	str	r2, [r3, #12]
 80001a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001aa:	2302      	movs	r3, #2
 80001ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ae:	2301      	movs	r3, #1
 80001b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001b2:	2310      	movs	r3, #16
 80001b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001b6:	2300      	movs	r3, #0
 80001b8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ba:	f107 0318 	add.w	r3, r7, #24
 80001be:	4618      	mov	r0, r3
 80001c0:	f000 fc1e 	bl	8000a00 <HAL_RCC_OscConfig>
 80001c4:	4603      	mov	r3, r0
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d001      	beq.n	80001ce <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001ca:	f000 f86d 	bl	80002a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ce:	230f      	movs	r3, #15
 80001d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001d2:	2300      	movs	r3, #0
 80001d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d6:	2300      	movs	r3, #0
 80001d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001da:	2300      	movs	r3, #0
 80001dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001de:	2300      	movs	r3, #0
 80001e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001e2:	1d3b      	adds	r3, r7, #4
 80001e4:	2100      	movs	r1, #0
 80001e6:	4618      	mov	r0, r3
 80001e8:	f000 fe8c 	bl	8000f04 <HAL_RCC_ClockConfig>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d001      	beq.n	80001f6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001f2:	f000 f859 	bl	80002a8 <Error_Handler>
  }
}
 80001f6:	bf00      	nop
 80001f8:	3740      	adds	r7, #64	; 0x40
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
	...

08000200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b086      	sub	sp, #24
 8000204:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000206:	f107 0308 	add.w	r3, r7, #8
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000214:	4b11      	ldr	r3, [pc, #68]	; (800025c <MX_GPIO_Init+0x5c>)
 8000216:	699b      	ldr	r3, [r3, #24]
 8000218:	4a10      	ldr	r2, [pc, #64]	; (800025c <MX_GPIO_Init+0x5c>)
 800021a:	f043 0304 	orr.w	r3, r3, #4
 800021e:	6193      	str	r3, [r2, #24]
 8000220:	4b0e      	ldr	r3, [pc, #56]	; (800025c <MX_GPIO_Init+0x5c>)
 8000222:	699b      	ldr	r3, [r3, #24]
 8000224:	f003 0304 	and.w	r3, r3, #4
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800022c:	2200      	movs	r2, #0
 800022e:	2140      	movs	r1, #64	; 0x40
 8000230:	480b      	ldr	r0, [pc, #44]	; (8000260 <MX_GPIO_Init+0x60>)
 8000232:	f000 fbb3 	bl	800099c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000236:	2340      	movs	r3, #64	; 0x40
 8000238:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800023a:	2301      	movs	r3, #1
 800023c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800023e:	2300      	movs	r3, #0
 8000240:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000242:	2302      	movs	r3, #2
 8000244:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000246:	f107 0308 	add.w	r3, r7, #8
 800024a:	4619      	mov	r1, r3
 800024c:	4804      	ldr	r0, [pc, #16]	; (8000260 <MX_GPIO_Init+0x60>)
 800024e:	f000 fa29 	bl	80006a4 <HAL_GPIO_Init>

}
 8000252:	bf00      	nop
 8000254:	3718      	adds	r7, #24
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	40021000 	.word	0x40021000
 8000260:	40010800 	.word	0x40010800

08000264 <StartBlink01>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 800026c:	2140      	movs	r1, #64	; 0x40
 800026e:	4804      	ldr	r0, [pc, #16]	; (8000280 <StartBlink01+0x1c>)
 8000270:	f000 fbac 	bl	80009cc <HAL_GPIO_TogglePin>
		osDelay(1000);
 8000274:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000278:	f001 fb42 	bl	8001900 <osDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 800027c:	e7f6      	b.n	800026c <StartBlink01+0x8>
 800027e:	bf00      	nop
 8000280:	40010800 	.word	0x40010800

08000284 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a04      	ldr	r2, [pc, #16]	; (80002a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000292:	4293      	cmp	r3, r2
 8000294:	d101      	bne.n	800029a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000296:	f000 f909 	bl	80004ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800029a:	bf00      	nop
 800029c:	3708      	adds	r7, #8
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	40012c00 	.word	0x40012c00

080002a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002ac:	b672      	cpsid	i
}
 80002ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80002b0:	e7fe      	b.n	80002b0 <Error_Handler+0x8>
	...

080002b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002ba:	4b11      	ldr	r3, [pc, #68]	; (8000300 <HAL_MspInit+0x4c>)
 80002bc:	699b      	ldr	r3, [r3, #24]
 80002be:	4a10      	ldr	r2, [pc, #64]	; (8000300 <HAL_MspInit+0x4c>)
 80002c0:	f043 0301 	orr.w	r3, r3, #1
 80002c4:	6193      	str	r3, [r2, #24]
 80002c6:	4b0e      	ldr	r3, [pc, #56]	; (8000300 <HAL_MspInit+0x4c>)
 80002c8:	699b      	ldr	r3, [r3, #24]
 80002ca:	f003 0301 	and.w	r3, r3, #1
 80002ce:	607b      	str	r3, [r7, #4]
 80002d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002d2:	4b0b      	ldr	r3, [pc, #44]	; (8000300 <HAL_MspInit+0x4c>)
 80002d4:	69db      	ldr	r3, [r3, #28]
 80002d6:	4a0a      	ldr	r2, [pc, #40]	; (8000300 <HAL_MspInit+0x4c>)
 80002d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002dc:	61d3      	str	r3, [r2, #28]
 80002de:	4b08      	ldr	r3, [pc, #32]	; (8000300 <HAL_MspInit+0x4c>)
 80002e0:	69db      	ldr	r3, [r3, #28]
 80002e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002e6:	603b      	str	r3, [r7, #0]
 80002e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80002ea:	2200      	movs	r2, #0
 80002ec:	210f      	movs	r1, #15
 80002ee:	f06f 0001 	mvn.w	r0, #1
 80002f2:	f000 f9ac 	bl	800064e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002f6:	bf00      	nop
 80002f8:	3708      	adds	r7, #8
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	40021000 	.word	0x40021000

08000304 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b08c      	sub	sp, #48	; 0x30
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800030c:	2300      	movs	r3, #0
 800030e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000310:	2300      	movs	r3, #0
 8000312:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000314:	2300      	movs	r3, #0
 8000316:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800031a:	4b2e      	ldr	r3, [pc, #184]	; (80003d4 <HAL_InitTick+0xd0>)
 800031c:	699b      	ldr	r3, [r3, #24]
 800031e:	4a2d      	ldr	r2, [pc, #180]	; (80003d4 <HAL_InitTick+0xd0>)
 8000320:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000324:	6193      	str	r3, [r2, #24]
 8000326:	4b2b      	ldr	r3, [pc, #172]	; (80003d4 <HAL_InitTick+0xd0>)
 8000328:	699b      	ldr	r3, [r3, #24]
 800032a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800032e:	60bb      	str	r3, [r7, #8]
 8000330:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000332:	f107 020c 	add.w	r2, r7, #12
 8000336:	f107 0310 	add.w	r3, r7, #16
 800033a:	4611      	mov	r1, r2
 800033c:	4618      	mov	r0, r3
 800033e:	f000 ff47 	bl	80011d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000342:	f000 ff31 	bl	80011a8 <HAL_RCC_GetPCLK2Freq>
 8000346:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800034a:	4a23      	ldr	r2, [pc, #140]	; (80003d8 <HAL_InitTick+0xd4>)
 800034c:	fba2 2303 	umull	r2, r3, r2, r3
 8000350:	0c9b      	lsrs	r3, r3, #18
 8000352:	3b01      	subs	r3, #1
 8000354:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000356:	4b21      	ldr	r3, [pc, #132]	; (80003dc <HAL_InitTick+0xd8>)
 8000358:	4a21      	ldr	r2, [pc, #132]	; (80003e0 <HAL_InitTick+0xdc>)
 800035a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800035c:	4b1f      	ldr	r3, [pc, #124]	; (80003dc <HAL_InitTick+0xd8>)
 800035e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000362:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000364:	4a1d      	ldr	r2, [pc, #116]	; (80003dc <HAL_InitTick+0xd8>)
 8000366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000368:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800036a:	4b1c      	ldr	r3, [pc, #112]	; (80003dc <HAL_InitTick+0xd8>)
 800036c:	2200      	movs	r2, #0
 800036e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000370:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <HAL_InitTick+0xd8>)
 8000372:	2200      	movs	r2, #0
 8000374:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000376:	4b19      	ldr	r3, [pc, #100]	; (80003dc <HAL_InitTick+0xd8>)
 8000378:	2200      	movs	r2, #0
 800037a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800037c:	4817      	ldr	r0, [pc, #92]	; (80003dc <HAL_InitTick+0xd8>)
 800037e:	f000 ff75 	bl	800126c <HAL_TIM_Base_Init>
 8000382:	4603      	mov	r3, r0
 8000384:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000388:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800038c:	2b00      	cmp	r3, #0
 800038e:	d11b      	bne.n	80003c8 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000390:	4812      	ldr	r0, [pc, #72]	; (80003dc <HAL_InitTick+0xd8>)
 8000392:	f000 ffc3 	bl	800131c <HAL_TIM_Base_Start_IT>
 8000396:	4603      	mov	r3, r0
 8000398:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800039c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d111      	bne.n	80003c8 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80003a4:	2019      	movs	r0, #25
 80003a6:	f000 f96e 	bl	8000686 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	2b0f      	cmp	r3, #15
 80003ae:	d808      	bhi.n	80003c2 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80003b0:	2200      	movs	r2, #0
 80003b2:	6879      	ldr	r1, [r7, #4]
 80003b4:	2019      	movs	r0, #25
 80003b6:	f000 f94a 	bl	800064e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80003ba:	4a0a      	ldr	r2, [pc, #40]	; (80003e4 <HAL_InitTick+0xe0>)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	6013      	str	r3, [r2, #0]
 80003c0:	e002      	b.n	80003c8 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80003c2:	2301      	movs	r3, #1
 80003c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80003c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	3730      	adds	r7, #48	; 0x30
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	40021000 	.word	0x40021000
 80003d8:	431bde83 	.word	0x431bde83
 80003dc:	20000030 	.word	0x20000030
 80003e0:	40012c00 	.word	0x40012c00
 80003e4:	20000004 	.word	0x20000004

080003e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003ec:	e7fe      	b.n	80003ec <NMI_Handler+0x4>

080003ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003ee:	b480      	push	{r7}
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003f2:	e7fe      	b.n	80003f2 <HardFault_Handler+0x4>

080003f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <MemManage_Handler+0x4>

080003fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003fa:	b480      	push	{r7}
 80003fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003fe:	e7fe      	b.n	80003fe <BusFault_Handler+0x4>

08000400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000404:	e7fe      	b.n	8000404 <UsageFault_Handler+0x4>

08000406 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000406:	b480      	push	{r7}
 8000408:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800040a:	bf00      	nop
 800040c:	46bd      	mov	sp, r7
 800040e:	bc80      	pop	{r7}
 8000410:	4770      	bx	lr
	...

08000414 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <TIM1_UP_IRQHandler+0x10>)
 800041a:	f000 ffcb 	bl	80013b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	20000030 	.word	0x20000030

08000428 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr

08000434 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000434:	480c      	ldr	r0, [pc, #48]	; (8000468 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000436:	490d      	ldr	r1, [pc, #52]	; (800046c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000438:	4a0d      	ldr	r2, [pc, #52]	; (8000470 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800043a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800043c:	e002      	b.n	8000444 <LoopCopyDataInit>

0800043e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800043e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000442:	3304      	adds	r3, #4

08000444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000448:	d3f9      	bcc.n	800043e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800044a:	4a0a      	ldr	r2, [pc, #40]	; (8000474 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800044c:	4c0a      	ldr	r4, [pc, #40]	; (8000478 <LoopFillZerobss+0x22>)
  movs r3, #0
 800044e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000450:	e001      	b.n	8000456 <LoopFillZerobss>

08000452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000454:	3204      	adds	r2, #4

08000456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000458:	d3fb      	bcc.n	8000452 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800045a:	f7ff ffe5 	bl	8000428 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800045e:	f003 fe15 	bl	800408c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000462:	f7ff fe75 	bl	8000150 <main>
  bx lr
 8000466:	4770      	bx	lr
  ldr r0, =_sdata
 8000468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800046c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000470:	0800418c 	.word	0x0800418c
  ldr r2, =_sbss
 8000474:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000478:	200019c4 	.word	0x200019c4

0800047c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800047c:	e7fe      	b.n	800047c <ADC1_2_IRQHandler>
	...

08000480 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000484:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <HAL_Init+0x28>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a07      	ldr	r2, [pc, #28]	; (80004a8 <HAL_Init+0x28>)
 800048a:	f043 0310 	orr.w	r3, r3, #16
 800048e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000490:	2003      	movs	r0, #3
 8000492:	f000 f8d1 	bl	8000638 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000496:	200f      	movs	r0, #15
 8000498:	f7ff ff34 	bl	8000304 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800049c:	f7ff ff0a 	bl	80002b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004a0:	2300      	movs	r3, #0
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40022000 	.word	0x40022000

080004ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004b0:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <HAL_IncTick+0x1c>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	461a      	mov	r2, r3
 80004b6:	4b05      	ldr	r3, [pc, #20]	; (80004cc <HAL_IncTick+0x20>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4413      	add	r3, r2
 80004bc:	4a03      	ldr	r2, [pc, #12]	; (80004cc <HAL_IncTick+0x20>)
 80004be:	6013      	str	r3, [r2, #0]
}
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr
 80004c8:	20000008 	.word	0x20000008
 80004cc:	20000078 	.word	0x20000078

080004d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  return uwTick;
 80004d4:	4b02      	ldr	r3, [pc, #8]	; (80004e0 <HAL_GetTick+0x10>)
 80004d6:	681b      	ldr	r3, [r3, #0]
}
 80004d8:	4618      	mov	r0, r3
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr
 80004e0:	20000078 	.word	0x20000078

080004e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	f003 0307 	and.w	r3, r3, #7
 80004f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <__NVIC_SetPriorityGrouping+0x44>)
 80004f6:	68db      	ldr	r3, [r3, #12]
 80004f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004fa:	68ba      	ldr	r2, [r7, #8]
 80004fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000500:	4013      	ands	r3, r2
 8000502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800050c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000516:	4a04      	ldr	r2, [pc, #16]	; (8000528 <__NVIC_SetPriorityGrouping+0x44>)
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	60d3      	str	r3, [r2, #12]
}
 800051c:	bf00      	nop
 800051e:	3714      	adds	r7, #20
 8000520:	46bd      	mov	sp, r7
 8000522:	bc80      	pop	{r7}
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	e000ed00 	.word	0xe000ed00

0800052c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000530:	4b04      	ldr	r3, [pc, #16]	; (8000544 <__NVIC_GetPriorityGrouping+0x18>)
 8000532:	68db      	ldr	r3, [r3, #12]
 8000534:	0a1b      	lsrs	r3, r3, #8
 8000536:	f003 0307 	and.w	r3, r3, #7
}
 800053a:	4618      	mov	r0, r3
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	e000ed00 	.word	0xe000ed00

08000548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000556:	2b00      	cmp	r3, #0
 8000558:	db0b      	blt.n	8000572 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	f003 021f 	and.w	r2, r3, #31
 8000560:	4906      	ldr	r1, [pc, #24]	; (800057c <__NVIC_EnableIRQ+0x34>)
 8000562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000566:	095b      	lsrs	r3, r3, #5
 8000568:	2001      	movs	r0, #1
 800056a:	fa00 f202 	lsl.w	r2, r0, r2
 800056e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr
 800057c:	e000e100 	.word	0xe000e100

08000580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	6039      	str	r1, [r7, #0]
 800058a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800058c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000590:	2b00      	cmp	r3, #0
 8000592:	db0a      	blt.n	80005aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	b2da      	uxtb	r2, r3
 8000598:	490c      	ldr	r1, [pc, #48]	; (80005cc <__NVIC_SetPriority+0x4c>)
 800059a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059e:	0112      	lsls	r2, r2, #4
 80005a0:	b2d2      	uxtb	r2, r2
 80005a2:	440b      	add	r3, r1
 80005a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005a8:	e00a      	b.n	80005c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	4908      	ldr	r1, [pc, #32]	; (80005d0 <__NVIC_SetPriority+0x50>)
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	f003 030f 	and.w	r3, r3, #15
 80005b6:	3b04      	subs	r3, #4
 80005b8:	0112      	lsls	r2, r2, #4
 80005ba:	b2d2      	uxtb	r2, r2
 80005bc:	440b      	add	r3, r1
 80005be:	761a      	strb	r2, [r3, #24]
}
 80005c0:	bf00      	nop
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bc80      	pop	{r7}
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	e000e100 	.word	0xe000e100
 80005d0:	e000ed00 	.word	0xe000ed00

080005d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b089      	sub	sp, #36	; 0x24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	f003 0307 	and.w	r3, r3, #7
 80005e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e8:	69fb      	ldr	r3, [r7, #28]
 80005ea:	f1c3 0307 	rsb	r3, r3, #7
 80005ee:	2b04      	cmp	r3, #4
 80005f0:	bf28      	it	cs
 80005f2:	2304      	movcs	r3, #4
 80005f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f6:	69fb      	ldr	r3, [r7, #28]
 80005f8:	3304      	adds	r3, #4
 80005fa:	2b06      	cmp	r3, #6
 80005fc:	d902      	bls.n	8000604 <NVIC_EncodePriority+0x30>
 80005fe:	69fb      	ldr	r3, [r7, #28]
 8000600:	3b03      	subs	r3, #3
 8000602:	e000      	b.n	8000606 <NVIC_EncodePriority+0x32>
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000608:	f04f 32ff 	mov.w	r2, #4294967295
 800060c:	69bb      	ldr	r3, [r7, #24]
 800060e:	fa02 f303 	lsl.w	r3, r2, r3
 8000612:	43da      	mvns	r2, r3
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	401a      	ands	r2, r3
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800061c:	f04f 31ff 	mov.w	r1, #4294967295
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	fa01 f303 	lsl.w	r3, r1, r3
 8000626:	43d9      	mvns	r1, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800062c:	4313      	orrs	r3, r2
         );
}
 800062e:	4618      	mov	r0, r3
 8000630:	3724      	adds	r7, #36	; 0x24
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr

08000638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f7ff ff4f 	bl	80004e4 <__NVIC_SetPriorityGrouping>
}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800064e:	b580      	push	{r7, lr}
 8000650:	b086      	sub	sp, #24
 8000652:	af00      	add	r7, sp, #0
 8000654:	4603      	mov	r3, r0
 8000656:	60b9      	str	r1, [r7, #8]
 8000658:	607a      	str	r2, [r7, #4]
 800065a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000660:	f7ff ff64 	bl	800052c <__NVIC_GetPriorityGrouping>
 8000664:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	68b9      	ldr	r1, [r7, #8]
 800066a:	6978      	ldr	r0, [r7, #20]
 800066c:	f7ff ffb2 	bl	80005d4 <NVIC_EncodePriority>
 8000670:	4602      	mov	r2, r0
 8000672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000676:	4611      	mov	r1, r2
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ff81 	bl	8000580 <__NVIC_SetPriority>
}
 800067e:	bf00      	nop
 8000680:	3718      	adds	r7, #24
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	b082      	sub	sp, #8
 800068a:	af00      	add	r7, sp, #0
 800068c:	4603      	mov	r3, r0
 800068e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff ff57 	bl	8000548 <__NVIC_EnableIRQ>
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b08b      	sub	sp, #44	; 0x2c
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80006ae:	2300      	movs	r3, #0
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80006b2:	2300      	movs	r3, #0
 80006b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006b6:	e161      	b.n	800097c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80006b8:	2201      	movs	r2, #1
 80006ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006bc:	fa02 f303 	lsl.w	r3, r2, r3
 80006c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	69fa      	ldr	r2, [r7, #28]
 80006c8:	4013      	ands	r3, r2
 80006ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80006cc:	69ba      	ldr	r2, [r7, #24]
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	f040 8150 	bne.w	8000976 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	4a97      	ldr	r2, [pc, #604]	; (8000938 <HAL_GPIO_Init+0x294>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d05e      	beq.n	800079e <HAL_GPIO_Init+0xfa>
 80006e0:	4a95      	ldr	r2, [pc, #596]	; (8000938 <HAL_GPIO_Init+0x294>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d875      	bhi.n	80007d2 <HAL_GPIO_Init+0x12e>
 80006e6:	4a95      	ldr	r2, [pc, #596]	; (800093c <HAL_GPIO_Init+0x298>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d058      	beq.n	800079e <HAL_GPIO_Init+0xfa>
 80006ec:	4a93      	ldr	r2, [pc, #588]	; (800093c <HAL_GPIO_Init+0x298>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d86f      	bhi.n	80007d2 <HAL_GPIO_Init+0x12e>
 80006f2:	4a93      	ldr	r2, [pc, #588]	; (8000940 <HAL_GPIO_Init+0x29c>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d052      	beq.n	800079e <HAL_GPIO_Init+0xfa>
 80006f8:	4a91      	ldr	r2, [pc, #580]	; (8000940 <HAL_GPIO_Init+0x29c>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d869      	bhi.n	80007d2 <HAL_GPIO_Init+0x12e>
 80006fe:	4a91      	ldr	r2, [pc, #580]	; (8000944 <HAL_GPIO_Init+0x2a0>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d04c      	beq.n	800079e <HAL_GPIO_Init+0xfa>
 8000704:	4a8f      	ldr	r2, [pc, #572]	; (8000944 <HAL_GPIO_Init+0x2a0>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d863      	bhi.n	80007d2 <HAL_GPIO_Init+0x12e>
 800070a:	4a8f      	ldr	r2, [pc, #572]	; (8000948 <HAL_GPIO_Init+0x2a4>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d046      	beq.n	800079e <HAL_GPIO_Init+0xfa>
 8000710:	4a8d      	ldr	r2, [pc, #564]	; (8000948 <HAL_GPIO_Init+0x2a4>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d85d      	bhi.n	80007d2 <HAL_GPIO_Init+0x12e>
 8000716:	2b12      	cmp	r3, #18
 8000718:	d82a      	bhi.n	8000770 <HAL_GPIO_Init+0xcc>
 800071a:	2b12      	cmp	r3, #18
 800071c:	d859      	bhi.n	80007d2 <HAL_GPIO_Init+0x12e>
 800071e:	a201      	add	r2, pc, #4	; (adr r2, 8000724 <HAL_GPIO_Init+0x80>)
 8000720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000724:	0800079f 	.word	0x0800079f
 8000728:	08000779 	.word	0x08000779
 800072c:	0800078b 	.word	0x0800078b
 8000730:	080007cd 	.word	0x080007cd
 8000734:	080007d3 	.word	0x080007d3
 8000738:	080007d3 	.word	0x080007d3
 800073c:	080007d3 	.word	0x080007d3
 8000740:	080007d3 	.word	0x080007d3
 8000744:	080007d3 	.word	0x080007d3
 8000748:	080007d3 	.word	0x080007d3
 800074c:	080007d3 	.word	0x080007d3
 8000750:	080007d3 	.word	0x080007d3
 8000754:	080007d3 	.word	0x080007d3
 8000758:	080007d3 	.word	0x080007d3
 800075c:	080007d3 	.word	0x080007d3
 8000760:	080007d3 	.word	0x080007d3
 8000764:	080007d3 	.word	0x080007d3
 8000768:	08000781 	.word	0x08000781
 800076c:	08000795 	.word	0x08000795
 8000770:	4a76      	ldr	r2, [pc, #472]	; (800094c <HAL_GPIO_Init+0x2a8>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d013      	beq.n	800079e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000776:	e02c      	b.n	80007d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	68db      	ldr	r3, [r3, #12]
 800077c:	623b      	str	r3, [r7, #32]
          break;
 800077e:	e029      	b.n	80007d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	3304      	adds	r3, #4
 8000786:	623b      	str	r3, [r7, #32]
          break;
 8000788:	e024      	b.n	80007d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	68db      	ldr	r3, [r3, #12]
 800078e:	3308      	adds	r3, #8
 8000790:	623b      	str	r3, [r7, #32]
          break;
 8000792:	e01f      	b.n	80007d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	68db      	ldr	r3, [r3, #12]
 8000798:	330c      	adds	r3, #12
 800079a:	623b      	str	r3, [r7, #32]
          break;
 800079c:	e01a      	b.n	80007d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	689b      	ldr	r3, [r3, #8]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d102      	bne.n	80007ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80007a6:	2304      	movs	r3, #4
 80007a8:	623b      	str	r3, [r7, #32]
          break;
 80007aa:	e013      	b.n	80007d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	689b      	ldr	r3, [r3, #8]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d105      	bne.n	80007c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007b4:	2308      	movs	r3, #8
 80007b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	69fa      	ldr	r2, [r7, #28]
 80007bc:	611a      	str	r2, [r3, #16]
          break;
 80007be:	e009      	b.n	80007d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007c0:	2308      	movs	r3, #8
 80007c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	69fa      	ldr	r2, [r7, #28]
 80007c8:	615a      	str	r2, [r3, #20]
          break;
 80007ca:	e003      	b.n	80007d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80007cc:	2300      	movs	r3, #0
 80007ce:	623b      	str	r3, [r7, #32]
          break;
 80007d0:	e000      	b.n	80007d4 <HAL_GPIO_Init+0x130>
          break;
 80007d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	2bff      	cmp	r3, #255	; 0xff
 80007d8:	d801      	bhi.n	80007de <HAL_GPIO_Init+0x13a>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	e001      	b.n	80007e2 <HAL_GPIO_Init+0x13e>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	3304      	adds	r3, #4
 80007e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	2bff      	cmp	r3, #255	; 0xff
 80007e8:	d802      	bhi.n	80007f0 <HAL_GPIO_Init+0x14c>
 80007ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	e002      	b.n	80007f6 <HAL_GPIO_Init+0x152>
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	3b08      	subs	r3, #8
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	210f      	movs	r1, #15
 80007fe:	693b      	ldr	r3, [r7, #16]
 8000800:	fa01 f303 	lsl.w	r3, r1, r3
 8000804:	43db      	mvns	r3, r3
 8000806:	401a      	ands	r2, r3
 8000808:	6a39      	ldr	r1, [r7, #32]
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	fa01 f303 	lsl.w	r3, r1, r3
 8000810:	431a      	orrs	r2, r3
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081e:	2b00      	cmp	r3, #0
 8000820:	f000 80a9 	beq.w	8000976 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000824:	4b4a      	ldr	r3, [pc, #296]	; (8000950 <HAL_GPIO_Init+0x2ac>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	4a49      	ldr	r2, [pc, #292]	; (8000950 <HAL_GPIO_Init+0x2ac>)
 800082a:	f043 0301 	orr.w	r3, r3, #1
 800082e:	6193      	str	r3, [r2, #24]
 8000830:	4b47      	ldr	r3, [pc, #284]	; (8000950 <HAL_GPIO_Init+0x2ac>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	f003 0301 	and.w	r3, r3, #1
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800083c:	4a45      	ldr	r2, [pc, #276]	; (8000954 <HAL_GPIO_Init+0x2b0>)
 800083e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000840:	089b      	lsrs	r3, r3, #2
 8000842:	3302      	adds	r3, #2
 8000844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000848:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800084a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084c:	f003 0303 	and.w	r3, r3, #3
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	220f      	movs	r2, #15
 8000854:	fa02 f303 	lsl.w	r3, r2, r3
 8000858:	43db      	mvns	r3, r3
 800085a:	68fa      	ldr	r2, [r7, #12]
 800085c:	4013      	ands	r3, r2
 800085e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4a3d      	ldr	r2, [pc, #244]	; (8000958 <HAL_GPIO_Init+0x2b4>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d00d      	beq.n	8000884 <HAL_GPIO_Init+0x1e0>
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4a3c      	ldr	r2, [pc, #240]	; (800095c <HAL_GPIO_Init+0x2b8>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d007      	beq.n	8000880 <HAL_GPIO_Init+0x1dc>
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4a3b      	ldr	r2, [pc, #236]	; (8000960 <HAL_GPIO_Init+0x2bc>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d101      	bne.n	800087c <HAL_GPIO_Init+0x1d8>
 8000878:	2302      	movs	r3, #2
 800087a:	e004      	b.n	8000886 <HAL_GPIO_Init+0x1e2>
 800087c:	2303      	movs	r3, #3
 800087e:	e002      	b.n	8000886 <HAL_GPIO_Init+0x1e2>
 8000880:	2301      	movs	r3, #1
 8000882:	e000      	b.n	8000886 <HAL_GPIO_Init+0x1e2>
 8000884:	2300      	movs	r3, #0
 8000886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000888:	f002 0203 	and.w	r2, r2, #3
 800088c:	0092      	lsls	r2, r2, #2
 800088e:	4093      	lsls	r3, r2
 8000890:	68fa      	ldr	r2, [r7, #12]
 8000892:	4313      	orrs	r3, r2
 8000894:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000896:	492f      	ldr	r1, [pc, #188]	; (8000954 <HAL_GPIO_Init+0x2b0>)
 8000898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089a:	089b      	lsrs	r3, r3, #2
 800089c:	3302      	adds	r3, #2
 800089e:	68fa      	ldr	r2, [r7, #12]
 80008a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d006      	beq.n	80008be <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80008b0:	4b2c      	ldr	r3, [pc, #176]	; (8000964 <HAL_GPIO_Init+0x2c0>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	492b      	ldr	r1, [pc, #172]	; (8000964 <HAL_GPIO_Init+0x2c0>)
 80008b6:	69bb      	ldr	r3, [r7, #24]
 80008b8:	4313      	orrs	r3, r2
 80008ba:	600b      	str	r3, [r1, #0]
 80008bc:	e006      	b.n	80008cc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80008be:	4b29      	ldr	r3, [pc, #164]	; (8000964 <HAL_GPIO_Init+0x2c0>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	69bb      	ldr	r3, [r7, #24]
 80008c4:	43db      	mvns	r3, r3
 80008c6:	4927      	ldr	r1, [pc, #156]	; (8000964 <HAL_GPIO_Init+0x2c0>)
 80008c8:	4013      	ands	r3, r2
 80008ca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d006      	beq.n	80008e6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80008d8:	4b22      	ldr	r3, [pc, #136]	; (8000964 <HAL_GPIO_Init+0x2c0>)
 80008da:	685a      	ldr	r2, [r3, #4]
 80008dc:	4921      	ldr	r1, [pc, #132]	; (8000964 <HAL_GPIO_Init+0x2c0>)
 80008de:	69bb      	ldr	r3, [r7, #24]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	604b      	str	r3, [r1, #4]
 80008e4:	e006      	b.n	80008f4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80008e6:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <HAL_GPIO_Init+0x2c0>)
 80008e8:	685a      	ldr	r2, [r3, #4]
 80008ea:	69bb      	ldr	r3, [r7, #24]
 80008ec:	43db      	mvns	r3, r3
 80008ee:	491d      	ldr	r1, [pc, #116]	; (8000964 <HAL_GPIO_Init+0x2c0>)
 80008f0:	4013      	ands	r3, r2
 80008f2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d006      	beq.n	800090e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000900:	4b18      	ldr	r3, [pc, #96]	; (8000964 <HAL_GPIO_Init+0x2c0>)
 8000902:	689a      	ldr	r2, [r3, #8]
 8000904:	4917      	ldr	r1, [pc, #92]	; (8000964 <HAL_GPIO_Init+0x2c0>)
 8000906:	69bb      	ldr	r3, [r7, #24]
 8000908:	4313      	orrs	r3, r2
 800090a:	608b      	str	r3, [r1, #8]
 800090c:	e006      	b.n	800091c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800090e:	4b15      	ldr	r3, [pc, #84]	; (8000964 <HAL_GPIO_Init+0x2c0>)
 8000910:	689a      	ldr	r2, [r3, #8]
 8000912:	69bb      	ldr	r3, [r7, #24]
 8000914:	43db      	mvns	r3, r3
 8000916:	4913      	ldr	r1, [pc, #76]	; (8000964 <HAL_GPIO_Init+0x2c0>)
 8000918:	4013      	ands	r3, r2
 800091a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000924:	2b00      	cmp	r3, #0
 8000926:	d01f      	beq.n	8000968 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000928:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <HAL_GPIO_Init+0x2c0>)
 800092a:	68da      	ldr	r2, [r3, #12]
 800092c:	490d      	ldr	r1, [pc, #52]	; (8000964 <HAL_GPIO_Init+0x2c0>)
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	4313      	orrs	r3, r2
 8000932:	60cb      	str	r3, [r1, #12]
 8000934:	e01f      	b.n	8000976 <HAL_GPIO_Init+0x2d2>
 8000936:	bf00      	nop
 8000938:	10320000 	.word	0x10320000
 800093c:	10310000 	.word	0x10310000
 8000940:	10220000 	.word	0x10220000
 8000944:	10210000 	.word	0x10210000
 8000948:	10120000 	.word	0x10120000
 800094c:	10110000 	.word	0x10110000
 8000950:	40021000 	.word	0x40021000
 8000954:	40010000 	.word	0x40010000
 8000958:	40010800 	.word	0x40010800
 800095c:	40010c00 	.word	0x40010c00
 8000960:	40011000 	.word	0x40011000
 8000964:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000968:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <HAL_GPIO_Init+0x2f4>)
 800096a:	68da      	ldr	r2, [r3, #12]
 800096c:	69bb      	ldr	r3, [r7, #24]
 800096e:	43db      	mvns	r3, r3
 8000970:	4909      	ldr	r1, [pc, #36]	; (8000998 <HAL_GPIO_Init+0x2f4>)
 8000972:	4013      	ands	r3, r2
 8000974:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000978:	3301      	adds	r3, #1
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000982:	fa22 f303 	lsr.w	r3, r2, r3
 8000986:	2b00      	cmp	r3, #0
 8000988:	f47f ae96 	bne.w	80006b8 <HAL_GPIO_Init+0x14>
  }
}
 800098c:	bf00      	nop
 800098e:	bf00      	nop
 8000990:	372c      	adds	r7, #44	; 0x2c
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr
 8000998:	40010400 	.word	0x40010400

0800099c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	807b      	strh	r3, [r7, #2]
 80009a8:	4613      	mov	r3, r2
 80009aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80009ac:	787b      	ldrb	r3, [r7, #1]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d003      	beq.n	80009ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80009b2:	887a      	ldrh	r2, [r7, #2]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80009b8:	e003      	b.n	80009c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009ba:	887b      	ldrh	r3, [r7, #2]
 80009bc:	041a      	lsls	r2, r3, #16
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	611a      	str	r2, [r3, #16]
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr

080009cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	460b      	mov	r3, r1
 80009d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80009de:	887a      	ldrh	r2, [r7, #2]
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	4013      	ands	r3, r2
 80009e4:	041a      	lsls	r2, r3, #16
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	43d9      	mvns	r1, r3
 80009ea:	887b      	ldrh	r3, [r7, #2]
 80009ec:	400b      	ands	r3, r1
 80009ee:	431a      	orrs	r2, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	611a      	str	r2, [r3, #16]
}
 80009f4:	bf00      	nop
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc80      	pop	{r7}
 80009fc:	4770      	bx	lr
	...

08000a00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d101      	bne.n	8000a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e272      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	f000 8087 	beq.w	8000b2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a20:	4b92      	ldr	r3, [pc, #584]	; (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f003 030c 	and.w	r3, r3, #12
 8000a28:	2b04      	cmp	r3, #4
 8000a2a:	d00c      	beq.n	8000a46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a2c:	4b8f      	ldr	r3, [pc, #572]	; (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	f003 030c 	and.w	r3, r3, #12
 8000a34:	2b08      	cmp	r3, #8
 8000a36:	d112      	bne.n	8000a5e <HAL_RCC_OscConfig+0x5e>
 8000a38:	4b8c      	ldr	r3, [pc, #560]	; (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a44:	d10b      	bne.n	8000a5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a46:	4b89      	ldr	r3, [pc, #548]	; (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d06c      	beq.n	8000b2c <HAL_RCC_OscConfig+0x12c>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d168      	bne.n	8000b2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e24c      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a66:	d106      	bne.n	8000a76 <HAL_RCC_OscConfig+0x76>
 8000a68:	4b80      	ldr	r3, [pc, #512]	; (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a7f      	ldr	r2, [pc, #508]	; (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a72:	6013      	str	r3, [r2, #0]
 8000a74:	e02e      	b.n	8000ad4 <HAL_RCC_OscConfig+0xd4>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d10c      	bne.n	8000a98 <HAL_RCC_OscConfig+0x98>
 8000a7e:	4b7b      	ldr	r3, [pc, #492]	; (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a7a      	ldr	r2, [pc, #488]	; (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a88:	6013      	str	r3, [r2, #0]
 8000a8a:	4b78      	ldr	r3, [pc, #480]	; (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a77      	ldr	r2, [pc, #476]	; (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000a90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a94:	6013      	str	r3, [r2, #0]
 8000a96:	e01d      	b.n	8000ad4 <HAL_RCC_OscConfig+0xd4>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000aa0:	d10c      	bne.n	8000abc <HAL_RCC_OscConfig+0xbc>
 8000aa2:	4b72      	ldr	r3, [pc, #456]	; (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a71      	ldr	r2, [pc, #452]	; (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aac:	6013      	str	r3, [r2, #0]
 8000aae:	4b6f      	ldr	r3, [pc, #444]	; (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a6e      	ldr	r2, [pc, #440]	; (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ab8:	6013      	str	r3, [r2, #0]
 8000aba:	e00b      	b.n	8000ad4 <HAL_RCC_OscConfig+0xd4>
 8000abc:	4b6b      	ldr	r3, [pc, #428]	; (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a6a      	ldr	r2, [pc, #424]	; (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ac6:	6013      	str	r3, [r2, #0]
 8000ac8:	4b68      	ldr	r3, [pc, #416]	; (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a67      	ldr	r2, [pc, #412]	; (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ad2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d013      	beq.n	8000b04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000adc:	f7ff fcf8 	bl	80004d0 <HAL_GetTick>
 8000ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ae2:	e008      	b.n	8000af6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ae4:	f7ff fcf4 	bl	80004d0 <HAL_GetTick>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	2b64      	cmp	r3, #100	; 0x64
 8000af0:	d901      	bls.n	8000af6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000af2:	2303      	movs	r3, #3
 8000af4:	e200      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000af6:	4b5d      	ldr	r3, [pc, #372]	; (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d0f0      	beq.n	8000ae4 <HAL_RCC_OscConfig+0xe4>
 8000b02:	e014      	b.n	8000b2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b04:	f7ff fce4 	bl	80004d0 <HAL_GetTick>
 8000b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b0a:	e008      	b.n	8000b1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b0c:	f7ff fce0 	bl	80004d0 <HAL_GetTick>
 8000b10:	4602      	mov	r2, r0
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	2b64      	cmp	r3, #100	; 0x64
 8000b18:	d901      	bls.n	8000b1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	e1ec      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b1e:	4b53      	ldr	r3, [pc, #332]	; (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d1f0      	bne.n	8000b0c <HAL_RCC_OscConfig+0x10c>
 8000b2a:	e000      	b.n	8000b2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f003 0302 	and.w	r3, r3, #2
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d063      	beq.n	8000c02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b3a:	4b4c      	ldr	r3, [pc, #304]	; (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f003 030c 	and.w	r3, r3, #12
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d00b      	beq.n	8000b5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b46:	4b49      	ldr	r3, [pc, #292]	; (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f003 030c 	and.w	r3, r3, #12
 8000b4e:	2b08      	cmp	r3, #8
 8000b50:	d11c      	bne.n	8000b8c <HAL_RCC_OscConfig+0x18c>
 8000b52:	4b46      	ldr	r3, [pc, #280]	; (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d116      	bne.n	8000b8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b5e:	4b43      	ldr	r3, [pc, #268]	; (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f003 0302 	and.w	r3, r3, #2
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d005      	beq.n	8000b76 <HAL_RCC_OscConfig+0x176>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	691b      	ldr	r3, [r3, #16]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d001      	beq.n	8000b76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e1c0      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b76:	4b3d      	ldr	r3, [pc, #244]	; (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	695b      	ldr	r3, [r3, #20]
 8000b82:	00db      	lsls	r3, r3, #3
 8000b84:	4939      	ldr	r1, [pc, #228]	; (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000b86:	4313      	orrs	r3, r2
 8000b88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b8a:	e03a      	b.n	8000c02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	691b      	ldr	r3, [r3, #16]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d020      	beq.n	8000bd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b94:	4b36      	ldr	r3, [pc, #216]	; (8000c70 <HAL_RCC_OscConfig+0x270>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b9a:	f7ff fc99 	bl	80004d0 <HAL_GetTick>
 8000b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ba0:	e008      	b.n	8000bb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ba2:	f7ff fc95 	bl	80004d0 <HAL_GetTick>
 8000ba6:	4602      	mov	r2, r0
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	1ad3      	subs	r3, r2, r3
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d901      	bls.n	8000bb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	e1a1      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bb4:	4b2d      	ldr	r3, [pc, #180]	; (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f003 0302 	and.w	r3, r3, #2
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d0f0      	beq.n	8000ba2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bc0:	4b2a      	ldr	r3, [pc, #168]	; (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	695b      	ldr	r3, [r3, #20]
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	4927      	ldr	r1, [pc, #156]	; (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	600b      	str	r3, [r1, #0]
 8000bd4:	e015      	b.n	8000c02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000bd6:	4b26      	ldr	r3, [pc, #152]	; (8000c70 <HAL_RCC_OscConfig+0x270>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bdc:	f7ff fc78 	bl	80004d0 <HAL_GetTick>
 8000be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000be2:	e008      	b.n	8000bf6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000be4:	f7ff fc74 	bl	80004d0 <HAL_GetTick>
 8000be8:	4602      	mov	r2, r0
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d901      	bls.n	8000bf6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	e180      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bf6:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d1f0      	bne.n	8000be4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f003 0308 	and.w	r3, r3, #8
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d03a      	beq.n	8000c84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d019      	beq.n	8000c4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <HAL_RCC_OscConfig+0x274>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c1c:	f7ff fc58 	bl	80004d0 <HAL_GetTick>
 8000c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c22:	e008      	b.n	8000c36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c24:	f7ff fc54 	bl	80004d0 <HAL_GetTick>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	d901      	bls.n	8000c36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000c32:	2303      	movs	r3, #3
 8000c34:	e160      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c36:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d0f0      	beq.n	8000c24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000c42:	2001      	movs	r0, #1
 8000c44:	f000 faf4 	bl	8001230 <RCC_Delay>
 8000c48:	e01c      	b.n	8000c84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <HAL_RCC_OscConfig+0x274>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c50:	f7ff fc3e 	bl	80004d0 <HAL_GetTick>
 8000c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c56:	e00f      	b.n	8000c78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c58:	f7ff fc3a 	bl	80004d0 <HAL_GetTick>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d908      	bls.n	8000c78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000c66:	2303      	movs	r3, #3
 8000c68:	e146      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4f8>
 8000c6a:	bf00      	nop
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	42420000 	.word	0x42420000
 8000c74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c78:	4b92      	ldr	r3, [pc, #584]	; (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c7c:	f003 0302 	and.w	r3, r3, #2
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d1e9      	bne.n	8000c58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f003 0304 	and.w	r3, r3, #4
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	f000 80a6 	beq.w	8000dde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c92:	2300      	movs	r3, #0
 8000c94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c96:	4b8b      	ldr	r3, [pc, #556]	; (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d10d      	bne.n	8000cbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ca2:	4b88      	ldr	r3, [pc, #544]	; (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000ca4:	69db      	ldr	r3, [r3, #28]
 8000ca6:	4a87      	ldr	r2, [pc, #540]	; (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cac:	61d3      	str	r3, [r2, #28]
 8000cae:	4b85      	ldr	r3, [pc, #532]	; (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cbe:	4b82      	ldr	r3, [pc, #520]	; (8000ec8 <HAL_RCC_OscConfig+0x4c8>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d118      	bne.n	8000cfc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cca:	4b7f      	ldr	r3, [pc, #508]	; (8000ec8 <HAL_RCC_OscConfig+0x4c8>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a7e      	ldr	r2, [pc, #504]	; (8000ec8 <HAL_RCC_OscConfig+0x4c8>)
 8000cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000cd6:	f7ff fbfb 	bl	80004d0 <HAL_GetTick>
 8000cda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cdc:	e008      	b.n	8000cf0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cde:	f7ff fbf7 	bl	80004d0 <HAL_GetTick>
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	1ad3      	subs	r3, r2, r3
 8000ce8:	2b64      	cmp	r3, #100	; 0x64
 8000cea:	d901      	bls.n	8000cf0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000cec:	2303      	movs	r3, #3
 8000cee:	e103      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cf0:	4b75      	ldr	r3, [pc, #468]	; (8000ec8 <HAL_RCC_OscConfig+0x4c8>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d0f0      	beq.n	8000cde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d106      	bne.n	8000d12 <HAL_RCC_OscConfig+0x312>
 8000d04:	4b6f      	ldr	r3, [pc, #444]	; (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000d06:	6a1b      	ldr	r3, [r3, #32]
 8000d08:	4a6e      	ldr	r2, [pc, #440]	; (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	6213      	str	r3, [r2, #32]
 8000d10:	e02d      	b.n	8000d6e <HAL_RCC_OscConfig+0x36e>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d10c      	bne.n	8000d34 <HAL_RCC_OscConfig+0x334>
 8000d1a:	4b6a      	ldr	r3, [pc, #424]	; (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000d1c:	6a1b      	ldr	r3, [r3, #32]
 8000d1e:	4a69      	ldr	r2, [pc, #420]	; (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000d20:	f023 0301 	bic.w	r3, r3, #1
 8000d24:	6213      	str	r3, [r2, #32]
 8000d26:	4b67      	ldr	r3, [pc, #412]	; (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000d28:	6a1b      	ldr	r3, [r3, #32]
 8000d2a:	4a66      	ldr	r2, [pc, #408]	; (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000d2c:	f023 0304 	bic.w	r3, r3, #4
 8000d30:	6213      	str	r3, [r2, #32]
 8000d32:	e01c      	b.n	8000d6e <HAL_RCC_OscConfig+0x36e>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	2b05      	cmp	r3, #5
 8000d3a:	d10c      	bne.n	8000d56 <HAL_RCC_OscConfig+0x356>
 8000d3c:	4b61      	ldr	r3, [pc, #388]	; (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000d3e:	6a1b      	ldr	r3, [r3, #32]
 8000d40:	4a60      	ldr	r2, [pc, #384]	; (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000d42:	f043 0304 	orr.w	r3, r3, #4
 8000d46:	6213      	str	r3, [r2, #32]
 8000d48:	4b5e      	ldr	r3, [pc, #376]	; (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000d4a:	6a1b      	ldr	r3, [r3, #32]
 8000d4c:	4a5d      	ldr	r2, [pc, #372]	; (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000d4e:	f043 0301 	orr.w	r3, r3, #1
 8000d52:	6213      	str	r3, [r2, #32]
 8000d54:	e00b      	b.n	8000d6e <HAL_RCC_OscConfig+0x36e>
 8000d56:	4b5b      	ldr	r3, [pc, #364]	; (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000d58:	6a1b      	ldr	r3, [r3, #32]
 8000d5a:	4a5a      	ldr	r2, [pc, #360]	; (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000d5c:	f023 0301 	bic.w	r3, r3, #1
 8000d60:	6213      	str	r3, [r2, #32]
 8000d62:	4b58      	ldr	r3, [pc, #352]	; (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000d64:	6a1b      	ldr	r3, [r3, #32]
 8000d66:	4a57      	ldr	r2, [pc, #348]	; (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000d68:	f023 0304 	bic.w	r3, r3, #4
 8000d6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d015      	beq.n	8000da2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d76:	f7ff fbab 	bl	80004d0 <HAL_GetTick>
 8000d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d7c:	e00a      	b.n	8000d94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d7e:	f7ff fba7 	bl	80004d0 <HAL_GetTick>
 8000d82:	4602      	mov	r2, r0
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d901      	bls.n	8000d94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000d90:	2303      	movs	r3, #3
 8000d92:	e0b1      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d94:	4b4b      	ldr	r3, [pc, #300]	; (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000d96:	6a1b      	ldr	r3, [r3, #32]
 8000d98:	f003 0302 	and.w	r3, r3, #2
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d0ee      	beq.n	8000d7e <HAL_RCC_OscConfig+0x37e>
 8000da0:	e014      	b.n	8000dcc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000da2:	f7ff fb95 	bl	80004d0 <HAL_GetTick>
 8000da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000da8:	e00a      	b.n	8000dc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000daa:	f7ff fb91 	bl	80004d0 <HAL_GetTick>
 8000dae:	4602      	mov	r2, r0
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d901      	bls.n	8000dc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	e09b      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dc0:	4b40      	ldr	r3, [pc, #256]	; (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000dc2:	6a1b      	ldr	r3, [r3, #32]
 8000dc4:	f003 0302 	and.w	r3, r3, #2
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d1ee      	bne.n	8000daa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000dcc:	7dfb      	ldrb	r3, [r7, #23]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d105      	bne.n	8000dde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000dd2:	4b3c      	ldr	r3, [pc, #240]	; (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	4a3b      	ldr	r2, [pc, #236]	; (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f000 8087 	beq.w	8000ef6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000de8:	4b36      	ldr	r3, [pc, #216]	; (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 030c 	and.w	r3, r3, #12
 8000df0:	2b08      	cmp	r3, #8
 8000df2:	d061      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	69db      	ldr	r3, [r3, #28]
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d146      	bne.n	8000e8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000dfc:	4b33      	ldr	r3, [pc, #204]	; (8000ecc <HAL_RCC_OscConfig+0x4cc>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e02:	f7ff fb65 	bl	80004d0 <HAL_GetTick>
 8000e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e08:	e008      	b.n	8000e1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e0a:	f7ff fb61 	bl	80004d0 <HAL_GetTick>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d901      	bls.n	8000e1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e06d      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e1c:	4b29      	ldr	r3, [pc, #164]	; (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d1f0      	bne.n	8000e0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6a1b      	ldr	r3, [r3, #32]
 8000e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e30:	d108      	bne.n	8000e44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e32:	4b24      	ldr	r3, [pc, #144]	; (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	4921      	ldr	r1, [pc, #132]	; (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000e40:	4313      	orrs	r3, r2
 8000e42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e44:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6a19      	ldr	r1, [r3, #32]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e54:	430b      	orrs	r3, r1
 8000e56:	491b      	ldr	r1, [pc, #108]	; (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <HAL_RCC_OscConfig+0x4cc>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e62:	f7ff fb35 	bl	80004d0 <HAL_GetTick>
 8000e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e68:	e008      	b.n	8000e7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e6a:	f7ff fb31 	bl	80004d0 <HAL_GetTick>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d901      	bls.n	8000e7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	e03d      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d0f0      	beq.n	8000e6a <HAL_RCC_OscConfig+0x46a>
 8000e88:	e035      	b.n	8000ef6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <HAL_RCC_OscConfig+0x4cc>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e90:	f7ff fb1e 	bl	80004d0 <HAL_GetTick>
 8000e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e96:	e008      	b.n	8000eaa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e98:	f7ff fb1a 	bl	80004d0 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d901      	bls.n	8000eaa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e026      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1f0      	bne.n	8000e98 <HAL_RCC_OscConfig+0x498>
 8000eb6:	e01e      	b.n	8000ef6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	69db      	ldr	r3, [r3, #28]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d107      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e019      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4f8>
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40007000 	.word	0x40007000
 8000ecc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <HAL_RCC_OscConfig+0x500>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a1b      	ldr	r3, [r3, #32]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d106      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d001      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e000      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40021000 	.word	0x40021000

08000f04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d101      	bne.n	8000f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e0d0      	b.n	80010ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f18:	4b6a      	ldr	r3, [pc, #424]	; (80010c4 <HAL_RCC_ClockConfig+0x1c0>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f003 0307 	and.w	r3, r3, #7
 8000f20:	683a      	ldr	r2, [r7, #0]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d910      	bls.n	8000f48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f26:	4b67      	ldr	r3, [pc, #412]	; (80010c4 <HAL_RCC_ClockConfig+0x1c0>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f023 0207 	bic.w	r2, r3, #7
 8000f2e:	4965      	ldr	r1, [pc, #404]	; (80010c4 <HAL_RCC_ClockConfig+0x1c0>)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f36:	4b63      	ldr	r3, [pc, #396]	; (80010c4 <HAL_RCC_ClockConfig+0x1c0>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	683a      	ldr	r2, [r7, #0]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d001      	beq.n	8000f48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e0b8      	b.n	80010ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d020      	beq.n	8000f96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 0304 	and.w	r3, r3, #4
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d005      	beq.n	8000f6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f60:	4b59      	ldr	r3, [pc, #356]	; (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	4a58      	ldr	r2, [pc, #352]	; (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000f6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 0308 	and.w	r3, r3, #8
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d005      	beq.n	8000f84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f78:	4b53      	ldr	r3, [pc, #332]	; (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	4a52      	ldr	r2, [pc, #328]	; (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000f82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f84:	4b50      	ldr	r3, [pc, #320]	; (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	494d      	ldr	r1, [pc, #308]	; (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f92:	4313      	orrs	r3, r2
 8000f94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d040      	beq.n	8001024 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d107      	bne.n	8000fba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000faa:	4b47      	ldr	r3, [pc, #284]	; (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d115      	bne.n	8000fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e07f      	b.n	80010ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d107      	bne.n	8000fd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fc2:	4b41      	ldr	r3, [pc, #260]	; (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d109      	bne.n	8000fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e073      	b.n	80010ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fd2:	4b3d      	ldr	r3, [pc, #244]	; (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e06b      	b.n	80010ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fe2:	4b39      	ldr	r3, [pc, #228]	; (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f023 0203 	bic.w	r2, r3, #3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	4936      	ldr	r1, [pc, #216]	; (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000ff4:	f7ff fa6c 	bl	80004d0 <HAL_GetTick>
 8000ff8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ffa:	e00a      	b.n	8001012 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ffc:	f7ff fa68 	bl	80004d0 <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	f241 3288 	movw	r2, #5000	; 0x1388
 800100a:	4293      	cmp	r3, r2
 800100c:	d901      	bls.n	8001012 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e053      	b.n	80010ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001012:	4b2d      	ldr	r3, [pc, #180]	; (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 020c 	and.w	r2, r3, #12
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	429a      	cmp	r2, r3
 8001022:	d1eb      	bne.n	8000ffc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001024:	4b27      	ldr	r3, [pc, #156]	; (80010c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0307 	and.w	r3, r3, #7
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	429a      	cmp	r2, r3
 8001030:	d210      	bcs.n	8001054 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001032:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f023 0207 	bic.w	r2, r3, #7
 800103a:	4922      	ldr	r1, [pc, #136]	; (80010c4 <HAL_RCC_ClockConfig+0x1c0>)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	4313      	orrs	r3, r2
 8001040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001042:	4b20      	ldr	r3, [pc, #128]	; (80010c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	683a      	ldr	r2, [r7, #0]
 800104c:	429a      	cmp	r2, r3
 800104e:	d001      	beq.n	8001054 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e032      	b.n	80010ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0304 	and.w	r3, r3, #4
 800105c:	2b00      	cmp	r3, #0
 800105e:	d008      	beq.n	8001072 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001060:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	4916      	ldr	r1, [pc, #88]	; (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 800106e:	4313      	orrs	r3, r2
 8001070:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0308 	and.w	r3, r3, #8
 800107a:	2b00      	cmp	r3, #0
 800107c:	d009      	beq.n	8001092 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800107e:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	691b      	ldr	r3, [r3, #16]
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	490e      	ldr	r1, [pc, #56]	; (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 800108e:	4313      	orrs	r3, r2
 8001090:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001092:	f000 f821 	bl	80010d8 <HAL_RCC_GetSysClockFreq>
 8001096:	4602      	mov	r2, r0
 8001098:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	091b      	lsrs	r3, r3, #4
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	490a      	ldr	r1, [pc, #40]	; (80010cc <HAL_RCC_ClockConfig+0x1c8>)
 80010a4:	5ccb      	ldrb	r3, [r1, r3]
 80010a6:	fa22 f303 	lsr.w	r3, r2, r3
 80010aa:	4a09      	ldr	r2, [pc, #36]	; (80010d0 <HAL_RCC_ClockConfig+0x1cc>)
 80010ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <HAL_RCC_ClockConfig+0x1d0>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff f926 	bl	8000304 <HAL_InitTick>

  return HAL_OK;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40022000 	.word	0x40022000
 80010c8:	40021000 	.word	0x40021000
 80010cc:	0800416c 	.word	0x0800416c
 80010d0:	20000000 	.word	0x20000000
 80010d4:	20000004 	.word	0x20000004

080010d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010d8:	b490      	push	{r4, r7}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80010de:	4b29      	ldr	r3, [pc, #164]	; (8001184 <HAL_RCC_GetSysClockFreq+0xac>)
 80010e0:	1d3c      	adds	r4, r7, #4
 80010e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80010e8:	f240 2301 	movw	r3, #513	; 0x201
 80010ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
 80010f6:	2300      	movs	r3, #0
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80010fe:	2300      	movs	r3, #0
 8001100:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001102:	4b21      	ldr	r3, [pc, #132]	; (8001188 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f003 030c 	and.w	r3, r3, #12
 800110e:	2b04      	cmp	r3, #4
 8001110:	d002      	beq.n	8001118 <HAL_RCC_GetSysClockFreq+0x40>
 8001112:	2b08      	cmp	r3, #8
 8001114:	d003      	beq.n	800111e <HAL_RCC_GetSysClockFreq+0x46>
 8001116:	e02b      	b.n	8001170 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001118:	4b1c      	ldr	r3, [pc, #112]	; (800118c <HAL_RCC_GetSysClockFreq+0xb4>)
 800111a:	623b      	str	r3, [r7, #32]
      break;
 800111c:	e02b      	b.n	8001176 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	0c9b      	lsrs	r3, r3, #18
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	3328      	adds	r3, #40	; 0x28
 8001128:	443b      	add	r3, r7
 800112a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800112e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d012      	beq.n	8001160 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800113a:	4b13      	ldr	r3, [pc, #76]	; (8001188 <HAL_RCC_GetSysClockFreq+0xb0>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	0c5b      	lsrs	r3, r3, #17
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	3328      	adds	r3, #40	; 0x28
 8001146:	443b      	add	r3, r7
 8001148:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800114c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	4a0e      	ldr	r2, [pc, #56]	; (800118c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001152:	fb03 f202 	mul.w	r2, r3, r2
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	fbb2 f3f3 	udiv	r3, r2, r3
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
 800115e:	e004      	b.n	800116a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	4a0b      	ldr	r2, [pc, #44]	; (8001190 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001164:	fb02 f303 	mul.w	r3, r2, r3
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116c:	623b      	str	r3, [r7, #32]
      break;
 800116e:	e002      	b.n	8001176 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001172:	623b      	str	r3, [r7, #32]
      break;
 8001174:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001176:	6a3b      	ldr	r3, [r7, #32]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3728      	adds	r7, #40	; 0x28
 800117c:	46bd      	mov	sp, r7
 800117e:	bc90      	pop	{r4, r7}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	08004120 	.word	0x08004120
 8001188:	40021000 	.word	0x40021000
 800118c:	007a1200 	.word	0x007a1200
 8001190:	003d0900 	.word	0x003d0900

08001194 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001198:	4b02      	ldr	r3, [pc, #8]	; (80011a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800119a:	681b      	ldr	r3, [r3, #0]
}
 800119c:	4618      	mov	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	20000000 	.word	0x20000000

080011a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80011ac:	f7ff fff2 	bl	8001194 <HAL_RCC_GetHCLKFreq>
 80011b0:	4602      	mov	r2, r0
 80011b2:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	0adb      	lsrs	r3, r3, #11
 80011b8:	f003 0307 	and.w	r3, r3, #7
 80011bc:	4903      	ldr	r1, [pc, #12]	; (80011cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80011be:	5ccb      	ldrb	r3, [r1, r3]
 80011c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40021000 	.word	0x40021000
 80011cc:	0800417c 	.word	0x0800417c

080011d0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	220f      	movs	r2, #15
 80011de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <HAL_RCC_GetClockConfig+0x58>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0203 	and.w	r2, r3, #3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80011ec:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <HAL_RCC_GetClockConfig+0x58>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80011f8:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <HAL_RCC_GetClockConfig+0x58>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <HAL_RCC_GetClockConfig+0x58>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	08db      	lsrs	r3, r3, #3
 800120a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_RCC_GetClockConfig+0x5c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0207 	and.w	r2, r3, #7
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	40021000 	.word	0x40021000
 800122c:	40022000 	.word	0x40022000

08001230 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001238:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <RCC_Delay+0x34>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <RCC_Delay+0x38>)
 800123e:	fba2 2303 	umull	r2, r3, r2, r3
 8001242:	0a5b      	lsrs	r3, r3, #9
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	fb02 f303 	mul.w	r3, r2, r3
 800124a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800124c:	bf00      	nop
  }
  while (Delay --);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	1e5a      	subs	r2, r3, #1
 8001252:	60fa      	str	r2, [r7, #12]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1f9      	bne.n	800124c <RCC_Delay+0x1c>
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr
 8001264:	20000000 	.word	0x20000000
 8001268:	10624dd3 	.word	0x10624dd3

0800126c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e041      	b.n	8001302 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d106      	bne.n	8001298 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f000 f839 	bl	800130a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2202      	movs	r2, #2
 800129c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3304      	adds	r3, #4
 80012a8:	4619      	mov	r1, r3
 80012aa:	4610      	mov	r0, r2
 80012ac:	f000 f9ae 	bl	800160c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2201      	movs	r2, #1
 80012b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2201      	movs	r2, #1
 80012bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2201      	movs	r2, #1
 80012c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2201      	movs	r2, #1
 80012cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2201      	movs	r2, #1
 80012e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2201      	movs	r2, #1
 80012f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2201      	movs	r2, #1
 80012fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr

0800131c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b01      	cmp	r3, #1
 800132e:	d001      	beq.n	8001334 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e035      	b.n	80013a0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2202      	movs	r2, #2
 8001338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	68da      	ldr	r2, [r3, #12]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f042 0201 	orr.w	r2, r2, #1
 800134a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a16      	ldr	r2, [pc, #88]	; (80013ac <HAL_TIM_Base_Start_IT+0x90>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d009      	beq.n	800136a <HAL_TIM_Base_Start_IT+0x4e>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800135e:	d004      	beq.n	800136a <HAL_TIM_Base_Start_IT+0x4e>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <HAL_TIM_Base_Start_IT+0x94>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d111      	bne.n	800138e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f003 0307 	and.w	r3, r3, #7
 8001374:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2b06      	cmp	r3, #6
 800137a:	d010      	beq.n	800139e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f042 0201 	orr.w	r2, r2, #1
 800138a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800138c:	e007      	b.n	800139e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f042 0201 	orr.w	r2, r2, #1
 800139c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800139e:	2300      	movs	r3, #0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40012c00 	.word	0x40012c00
 80013b0:	40000400 	.word	0x40000400

080013b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d122      	bne.n	8001410 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d11b      	bne.n	8001410 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f06f 0202 	mvn.w	r2, #2
 80013e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2201      	movs	r2, #1
 80013e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f000 f8ed 	bl	80015d6 <HAL_TIM_IC_CaptureCallback>
 80013fc:	e005      	b.n	800140a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f000 f8e0 	bl	80015c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 f8ef 	bl	80015e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	2b04      	cmp	r3, #4
 800141c:	d122      	bne.n	8001464 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	2b04      	cmp	r3, #4
 800142a:	d11b      	bne.n	8001464 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f06f 0204 	mvn.w	r2, #4
 8001434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2202      	movs	r2, #2
 800143a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 f8c3 	bl	80015d6 <HAL_TIM_IC_CaptureCallback>
 8001450:	e005      	b.n	800145e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 f8b6 	bl	80015c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 f8c5 	bl	80015e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	2b08      	cmp	r3, #8
 8001470:	d122      	bne.n	80014b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	f003 0308 	and.w	r3, r3, #8
 800147c:	2b08      	cmp	r3, #8
 800147e:	d11b      	bne.n	80014b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f06f 0208 	mvn.w	r2, #8
 8001488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2204      	movs	r2, #4
 800148e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f000 f899 	bl	80015d6 <HAL_TIM_IC_CaptureCallback>
 80014a4:	e005      	b.n	80014b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 f88c 	bl	80015c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f000 f89b 	bl	80015e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	f003 0310 	and.w	r3, r3, #16
 80014c2:	2b10      	cmp	r3, #16
 80014c4:	d122      	bne.n	800150c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	f003 0310 	and.w	r3, r3, #16
 80014d0:	2b10      	cmp	r3, #16
 80014d2:	d11b      	bne.n	800150c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f06f 0210 	mvn.w	r2, #16
 80014dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2208      	movs	r2, #8
 80014e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 f86f 	bl	80015d6 <HAL_TIM_IC_CaptureCallback>
 80014f8:	e005      	b.n	8001506 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 f862 	bl	80015c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 f871 	bl	80015e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b01      	cmp	r3, #1
 8001518:	d10e      	bne.n	8001538 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	2b01      	cmp	r3, #1
 8001526:	d107      	bne.n	8001538 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f06f 0201 	mvn.w	r2, #1
 8001530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7fe fea6 	bl	8000284 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001542:	2b80      	cmp	r3, #128	; 0x80
 8001544:	d10e      	bne.n	8001564 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001550:	2b80      	cmp	r3, #128	; 0x80
 8001552:	d107      	bne.n	8001564 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800155c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 f8b5 	bl	80016ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800156e:	2b40      	cmp	r3, #64	; 0x40
 8001570:	d10e      	bne.n	8001590 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800157c:	2b40      	cmp	r3, #64	; 0x40
 800157e:	d107      	bne.n	8001590 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f000 f835 	bl	80015fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	f003 0320 	and.w	r3, r3, #32
 800159a:	2b20      	cmp	r3, #32
 800159c:	d10e      	bne.n	80015bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	f003 0320 	and.w	r3, r3, #32
 80015a8:	2b20      	cmp	r3, #32
 80015aa:	d107      	bne.n	80015bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f06f 0220 	mvn.w	r2, #32
 80015b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 f880 	bl	80016bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr

080015d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr

080015fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr

0800160c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a25      	ldr	r2, [pc, #148]	; (80016b4 <TIM_Base_SetConfig+0xa8>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d007      	beq.n	8001634 <TIM_Base_SetConfig+0x28>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800162a:	d003      	beq.n	8001634 <TIM_Base_SetConfig+0x28>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a22      	ldr	r2, [pc, #136]	; (80016b8 <TIM_Base_SetConfig+0xac>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d108      	bne.n	8001646 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800163a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	68fa      	ldr	r2, [r7, #12]
 8001642:	4313      	orrs	r3, r2
 8001644:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a1a      	ldr	r2, [pc, #104]	; (80016b4 <TIM_Base_SetConfig+0xa8>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d007      	beq.n	800165e <TIM_Base_SetConfig+0x52>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001654:	d003      	beq.n	800165e <TIM_Base_SetConfig+0x52>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a17      	ldr	r2, [pc, #92]	; (80016b8 <TIM_Base_SetConfig+0xac>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d108      	bne.n	8001670 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	4313      	orrs	r3, r2
 800167c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a07      	ldr	r2, [pc, #28]	; (80016b4 <TIM_Base_SetConfig+0xa8>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d103      	bne.n	80016a4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	691a      	ldr	r2, [r3, #16]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	615a      	str	r2, [r3, #20]
}
 80016aa:	bf00      	nop
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr
 80016b4:	40012c00 	.word	0x40012c00
 80016b8:	40000400 	.word	0x40000400

080016bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr

080016ce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr

080016e0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80016e6:	f3ef 8305 	mrs	r3, IPSR
 80016ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80016ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10f      	bne.n	8001712 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016f2:	f3ef 8310 	mrs	r3, PRIMASK
 80016f6:	607b      	str	r3, [r7, #4]
  return(result);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d109      	bne.n	8001712 <osKernelInitialize+0x32>
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <osKernelInitialize+0x60>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b02      	cmp	r3, #2
 8001704:	d109      	bne.n	800171a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001706:	f3ef 8311 	mrs	r3, BASEPRI
 800170a:	603b      	str	r3, [r7, #0]
  return(result);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001712:	f06f 0305 	mvn.w	r3, #5
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	e00c      	b.n	8001734 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <osKernelInitialize+0x60>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d105      	bne.n	800172e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001722:	4b07      	ldr	r3, [pc, #28]	; (8001740 <osKernelInitialize+0x60>)
 8001724:	2201      	movs	r2, #1
 8001726:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	e002      	b.n	8001734 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800172e:	f04f 33ff 	mov.w	r3, #4294967295
 8001732:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001734:	68fb      	ldr	r3, [r7, #12]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	2000007c 	.word	0x2000007c

08001744 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800174a:	f3ef 8305 	mrs	r3, IPSR
 800174e:	60bb      	str	r3, [r7, #8]
  return(result);
 8001750:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10f      	bne.n	8001776 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001756:	f3ef 8310 	mrs	r3, PRIMASK
 800175a:	607b      	str	r3, [r7, #4]
  return(result);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d109      	bne.n	8001776 <osKernelStart+0x32>
 8001762:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <osKernelStart+0x64>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d109      	bne.n	800177e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800176a:	f3ef 8311 	mrs	r3, BASEPRI
 800176e:	603b      	str	r3, [r7, #0]
  return(result);
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <osKernelStart+0x3a>
    stat = osErrorISR;
 8001776:	f06f 0305 	mvn.w	r3, #5
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	e00e      	b.n	800179c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800177e:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <osKernelStart+0x64>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d107      	bne.n	8001796 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001786:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <osKernelStart+0x64>)
 8001788:	2202      	movs	r2, #2
 800178a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800178c:	f001 f878 	bl	8002880 <vTaskStartScheduler>
      stat = osOK;
 8001790:	2300      	movs	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	e002      	b.n	800179c <osKernelStart+0x58>
    } else {
      stat = osError;
 8001796:	f04f 33ff 	mov.w	r3, #4294967295
 800179a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800179c:	68fb      	ldr	r3, [r7, #12]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	2000007c 	.word	0x2000007c

080017ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b092      	sub	sp, #72	; 0x48
 80017b0:	af04      	add	r7, sp, #16
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80017bc:	f3ef 8305 	mrs	r3, IPSR
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f040 8094 	bne.w	80018f2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017ca:	f3ef 8310 	mrs	r3, PRIMASK
 80017ce:	623b      	str	r3, [r7, #32]
  return(result);
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f040 808d 	bne.w	80018f2 <osThreadNew+0x146>
 80017d8:	4b48      	ldr	r3, [pc, #288]	; (80018fc <osThreadNew+0x150>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d106      	bne.n	80017ee <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80017e0:	f3ef 8311 	mrs	r3, BASEPRI
 80017e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f040 8082 	bne.w	80018f2 <osThreadNew+0x146>
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d07e      	beq.n	80018f2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80017f4:	2380      	movs	r3, #128	; 0x80
 80017f6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80017f8:	2318      	movs	r3, #24
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80017fc:	2300      	movs	r3, #0
 80017fe:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001800:	f107 031b 	add.w	r3, r7, #27
 8001804:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8001806:	f04f 33ff 	mov.w	r3, #4294967295
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d045      	beq.n	800189e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d002      	beq.n	8001820 <osThreadNew+0x74>
        name = attr->name;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d002      	beq.n	800182e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800182e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001830:	2b00      	cmp	r3, #0
 8001832:	d008      	beq.n	8001846 <osThreadNew+0x9a>
 8001834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001836:	2b38      	cmp	r3, #56	; 0x38
 8001838:	d805      	bhi.n	8001846 <osThreadNew+0x9a>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <osThreadNew+0x9e>
        return (NULL);
 8001846:	2300      	movs	r3, #0
 8001848:	e054      	b.n	80018f4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	089b      	lsrs	r3, r3, #2
 8001858:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00e      	beq.n	8001880 <osThreadNew+0xd4>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	2b5b      	cmp	r3, #91	; 0x5b
 8001868:	d90a      	bls.n	8001880 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800186e:	2b00      	cmp	r3, #0
 8001870:	d006      	beq.n	8001880 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d002      	beq.n	8001880 <osThreadNew+0xd4>
        mem = 1;
 800187a:	2301      	movs	r3, #1
 800187c:	62bb      	str	r3, [r7, #40]	; 0x28
 800187e:	e010      	b.n	80018a2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d10c      	bne.n	80018a2 <osThreadNew+0xf6>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d108      	bne.n	80018a2 <osThreadNew+0xf6>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d104      	bne.n	80018a2 <osThreadNew+0xf6>
          mem = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
 800189c:	e001      	b.n	80018a2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80018a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d110      	bne.n	80018ca <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80018b0:	9202      	str	r2, [sp, #8]
 80018b2:	9301      	str	r3, [sp, #4]
 80018b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	f000 fe12 	bl	80024e8 <xTaskCreateStatic>
 80018c4:	4603      	mov	r3, r0
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	e013      	b.n	80018f2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80018ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d110      	bne.n	80018f2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80018d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	9301      	str	r3, [sp, #4]
 80018da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f000 fe5c 	bl	80025a0 <xTaskCreate>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d001      	beq.n	80018f2 <osThreadNew+0x146>
          hTask = NULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80018f2:	697b      	ldr	r3, [r7, #20]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3738      	adds	r7, #56	; 0x38
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	2000007c 	.word	0x2000007c

08001900 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001908:	f3ef 8305 	mrs	r3, IPSR
 800190c:	613b      	str	r3, [r7, #16]
  return(result);
 800190e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001910:	2b00      	cmp	r3, #0
 8001912:	d10f      	bne.n	8001934 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001914:	f3ef 8310 	mrs	r3, PRIMASK
 8001918:	60fb      	str	r3, [r7, #12]
  return(result);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d109      	bne.n	8001934 <osDelay+0x34>
 8001920:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <osDelay+0x58>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b02      	cmp	r3, #2
 8001926:	d109      	bne.n	800193c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001928:	f3ef 8311 	mrs	r3, BASEPRI
 800192c:	60bb      	str	r3, [r7, #8]
  return(result);
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <osDelay+0x3c>
    stat = osErrorISR;
 8001934:	f06f 0305 	mvn.w	r3, #5
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	e007      	b.n	800194c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d002      	beq.n	800194c <osDelay+0x4c>
      vTaskDelay(ticks);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 ff66 	bl	8002818 <vTaskDelay>
    }
  }

  return (stat);
 800194c:	697b      	ldr	r3, [r7, #20]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	2000007c 	.word	0x2000007c

0800195c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4a06      	ldr	r2, [pc, #24]	; (8001984 <vApplicationGetIdleTaskMemory+0x28>)
 800196c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	4a05      	ldr	r2, [pc, #20]	; (8001988 <vApplicationGetIdleTaskMemory+0x2c>)
 8001972:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2280      	movs	r2, #128	; 0x80
 8001978:	601a      	str	r2, [r3, #0]
}
 800197a:	bf00      	nop
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr
 8001984:	20000080 	.word	0x20000080
 8001988:	200000dc 	.word	0x200000dc

0800198c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4a07      	ldr	r2, [pc, #28]	; (80019b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800199c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	4a06      	ldr	r2, [pc, #24]	; (80019bc <vApplicationGetTimerTaskMemory+0x30>)
 80019a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019aa:	601a      	str	r2, [r3, #0]
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	200002dc 	.word	0x200002dc
 80019bc:	20000338 	.word	0x20000338

080019c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f103 0208 	add.w	r2, r3, #8
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f04f 32ff 	mov.w	r2, #4294967295
 80019d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f103 0208 	add.w	r2, r3, #8
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f103 0208 	add.w	r2, r3, #8
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr

080019fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr

08001a16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a16:	b480      	push	{r7}
 8001a18:	b085      	sub	sp, #20
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
 8001a1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	1c5a      	adds	r2, r3, #1
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	601a      	str	r2, [r3, #0]
}
 8001a52:	bf00      	nop
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr

08001a5c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a72:	d103      	bne.n	8001a7c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	e00c      	b.n	8001a96 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3308      	adds	r3, #8
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	e002      	b.n	8001a8a <vListInsert+0x2e>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68ba      	ldr	r2, [r7, #8]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d2f6      	bcs.n	8001a84 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	1c5a      	adds	r2, r3, #1
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	601a      	str	r2, [r3, #0]
}
 8001ac2:	bf00      	nop
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr

08001acc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6892      	ldr	r2, [r2, #8]
 8001ae2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6852      	ldr	r2, [r2, #4]
 8001aec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d103      	bne.n	8001b00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	1e5a      	subs	r2, r3, #1
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr
	...

08001b20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d10a      	bne.n	8001b4a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b38:	f383 8811 	msr	BASEPRI, r3
 8001b3c:	f3bf 8f6f 	isb	sy
 8001b40:	f3bf 8f4f 	dsb	sy
 8001b44:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001b46:	bf00      	nop
 8001b48:	e7fe      	b.n	8001b48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001b4a:	f001 ffc7 	bl	8003adc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b56:	68f9      	ldr	r1, [r7, #12]
 8001b58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001b5a:	fb01 f303 	mul.w	r3, r1, r3
 8001b5e:	441a      	add	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2200      	movs	r2, #0
 8001b68:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	68f9      	ldr	r1, [r7, #12]
 8001b7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001b80:	fb01 f303 	mul.w	r3, r1, r3
 8001b84:	441a      	add	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	22ff      	movs	r2, #255	; 0xff
 8001b8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	22ff      	movs	r2, #255	; 0xff
 8001b96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d114      	bne.n	8001bca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d01a      	beq.n	8001bde <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	3310      	adds	r3, #16
 8001bac:	4618      	mov	r0, r3
 8001bae:	f001 f8f1 	bl	8002d94 <xTaskRemoveFromEventList>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d012      	beq.n	8001bde <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <xQueueGenericReset+0xcc>)
 8001bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	f3bf 8f4f 	dsb	sy
 8001bc4:	f3bf 8f6f 	isb	sy
 8001bc8:	e009      	b.n	8001bde <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	3310      	adds	r3, #16
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fef6 	bl	80019c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	3324      	adds	r3, #36	; 0x24
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fef1 	bl	80019c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001bde:	f001 ffad 	bl	8003b3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001be2:	2301      	movs	r3, #1
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	e000ed04 	.word	0xe000ed04

08001bf0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08e      	sub	sp, #56	; 0x38
 8001bf4:	af02      	add	r7, sp, #8
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
 8001bfc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10a      	bne.n	8001c1a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c08:	f383 8811 	msr	BASEPRI, r3
 8001c0c:	f3bf 8f6f 	isb	sy
 8001c10:	f3bf 8f4f 	dsb	sy
 8001c14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001c16:	bf00      	nop
 8001c18:	e7fe      	b.n	8001c18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d10a      	bne.n	8001c36 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8001c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c24:	f383 8811 	msr	BASEPRI, r3
 8001c28:	f3bf 8f6f 	isb	sy
 8001c2c:	f3bf 8f4f 	dsb	sy
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001c32:	bf00      	nop
 8001c34:	e7fe      	b.n	8001c34 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <xQueueGenericCreateStatic+0x52>
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <xQueueGenericCreateStatic+0x56>
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <xQueueGenericCreateStatic+0x58>
 8001c46:	2300      	movs	r3, #0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10a      	bne.n	8001c62 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c50:	f383 8811 	msr	BASEPRI, r3
 8001c54:	f3bf 8f6f 	isb	sy
 8001c58:	f3bf 8f4f 	dsb	sy
 8001c5c:	623b      	str	r3, [r7, #32]
}
 8001c5e:	bf00      	nop
 8001c60:	e7fe      	b.n	8001c60 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d102      	bne.n	8001c6e <xQueueGenericCreateStatic+0x7e>
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <xQueueGenericCreateStatic+0x82>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <xQueueGenericCreateStatic+0x84>
 8001c72:	2300      	movs	r3, #0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10a      	bne.n	8001c8e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c7c:	f383 8811 	msr	BASEPRI, r3
 8001c80:	f3bf 8f6f 	isb	sy
 8001c84:	f3bf 8f4f 	dsb	sy
 8001c88:	61fb      	str	r3, [r7, #28]
}
 8001c8a:	bf00      	nop
 8001c8c:	e7fe      	b.n	8001c8c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001c8e:	2350      	movs	r3, #80	; 0x50
 8001c90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	2b50      	cmp	r3, #80	; 0x50
 8001c96:	d00a      	beq.n	8001cae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c9c:	f383 8811 	msr	BASEPRI, r3
 8001ca0:	f3bf 8f6f 	isb	sy
 8001ca4:	f3bf 8f4f 	dsb	sy
 8001ca8:	61bb      	str	r3, [r7, #24]
}
 8001caa:	bf00      	nop
 8001cac:	e7fe      	b.n	8001cac <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00d      	beq.n	8001cd4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001cc0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	68b9      	ldr	r1, [r7, #8]
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f000 f805 	bl	8001cde <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3730      	adds	r7, #48	; 0x30
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b084      	sub	sp, #16
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	60f8      	str	r0, [r7, #12]
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
 8001cea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d103      	bne.n	8001cfa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	e002      	b.n	8001d00 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	68ba      	ldr	r2, [r7, #8]
 8001d0a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	69b8      	ldr	r0, [r7, #24]
 8001d10:	f7ff ff06 	bl	8001b20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	78fa      	ldrb	r2, [r7, #3]
 8001d18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001d1c:	bf00      	nop
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08e      	sub	sp, #56	; 0x38
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
 8001d30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001d32:	2300      	movs	r3, #0
 8001d34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10a      	bne.n	8001d56 <xQueueGenericSend+0x32>
	__asm volatile
 8001d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d44:	f383 8811 	msr	BASEPRI, r3
 8001d48:	f3bf 8f6f 	isb	sy
 8001d4c:	f3bf 8f4f 	dsb	sy
 8001d50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001d52:	bf00      	nop
 8001d54:	e7fe      	b.n	8001d54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d103      	bne.n	8001d64 <xQueueGenericSend+0x40>
 8001d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <xQueueGenericSend+0x44>
 8001d64:	2301      	movs	r3, #1
 8001d66:	e000      	b.n	8001d6a <xQueueGenericSend+0x46>
 8001d68:	2300      	movs	r3, #0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10a      	bne.n	8001d84 <xQueueGenericSend+0x60>
	__asm volatile
 8001d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d72:	f383 8811 	msr	BASEPRI, r3
 8001d76:	f3bf 8f6f 	isb	sy
 8001d7a:	f3bf 8f4f 	dsb	sy
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001d80:	bf00      	nop
 8001d82:	e7fe      	b.n	8001d82 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d103      	bne.n	8001d92 <xQueueGenericSend+0x6e>
 8001d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d101      	bne.n	8001d96 <xQueueGenericSend+0x72>
 8001d92:	2301      	movs	r3, #1
 8001d94:	e000      	b.n	8001d98 <xQueueGenericSend+0x74>
 8001d96:	2300      	movs	r3, #0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d10a      	bne.n	8001db2 <xQueueGenericSend+0x8e>
	__asm volatile
 8001d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001da0:	f383 8811 	msr	BASEPRI, r3
 8001da4:	f3bf 8f6f 	isb	sy
 8001da8:	f3bf 8f4f 	dsb	sy
 8001dac:	623b      	str	r3, [r7, #32]
}
 8001dae:	bf00      	nop
 8001db0:	e7fe      	b.n	8001db0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001db2:	f001 f9b1 	bl	8003118 <xTaskGetSchedulerState>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d102      	bne.n	8001dc2 <xQueueGenericSend+0x9e>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <xQueueGenericSend+0xa2>
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e000      	b.n	8001dc8 <xQueueGenericSend+0xa4>
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10a      	bne.n	8001de2 <xQueueGenericSend+0xbe>
	__asm volatile
 8001dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dd0:	f383 8811 	msr	BASEPRI, r3
 8001dd4:	f3bf 8f6f 	isb	sy
 8001dd8:	f3bf 8f4f 	dsb	sy
 8001ddc:	61fb      	str	r3, [r7, #28]
}
 8001dde:	bf00      	nop
 8001de0:	e7fe      	b.n	8001de0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001de2:	f001 fe7b 	bl	8003adc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d302      	bcc.n	8001df8 <xQueueGenericSend+0xd4>
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d129      	bne.n	8001e4c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	68b9      	ldr	r1, [r7, #8]
 8001dfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001dfe:	f000 fa07 	bl	8002210 <prvCopyDataToQueue>
 8001e02:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d010      	beq.n	8001e2e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0e:	3324      	adds	r3, #36	; 0x24
 8001e10:	4618      	mov	r0, r3
 8001e12:	f000 ffbf 	bl	8002d94 <xTaskRemoveFromEventList>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d013      	beq.n	8001e44 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001e1c:	4b3f      	ldr	r3, [pc, #252]	; (8001f1c <xQueueGenericSend+0x1f8>)
 8001e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	f3bf 8f4f 	dsb	sy
 8001e28:	f3bf 8f6f 	isb	sy
 8001e2c:	e00a      	b.n	8001e44 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d007      	beq.n	8001e44 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001e34:	4b39      	ldr	r3, [pc, #228]	; (8001f1c <xQueueGenericSend+0x1f8>)
 8001e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	f3bf 8f4f 	dsb	sy
 8001e40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001e44:	f001 fe7a 	bl	8003b3c <vPortExitCritical>
				return pdPASS;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e063      	b.n	8001f14 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d103      	bne.n	8001e5a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001e52:	f001 fe73 	bl	8003b3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	e05c      	b.n	8001f14 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d106      	bne.n	8001e6e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	4618      	mov	r0, r3
 8001e66:	f000 fff9 	bl	8002e5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001e6e:	f001 fe65 	bl	8003b3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001e72:	f000 fd6b 	bl	800294c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001e76:	f001 fe31 	bl	8003adc <vPortEnterCritical>
 8001e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e80:	b25b      	sxtb	r3, r3
 8001e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e86:	d103      	bne.n	8001e90 <xQueueGenericSend+0x16c>
 8001e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e96:	b25b      	sxtb	r3, r3
 8001e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e9c:	d103      	bne.n	8001ea6 <xQueueGenericSend+0x182>
 8001e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ea6:	f001 fe49 	bl	8003b3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001eaa:	1d3a      	adds	r2, r7, #4
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	4611      	mov	r1, r2
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 ffe8 	bl	8002e88 <xTaskCheckForTimeOut>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d124      	bne.n	8001f08 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001ebe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ec0:	f000 fa9e 	bl	8002400 <prvIsQueueFull>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d018      	beq.n	8001efc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ecc:	3310      	adds	r3, #16
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	4611      	mov	r1, r2
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 ff0e 	bl	8002cf4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001ed8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001eda:	f000 fa29 	bl	8002330 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001ede:	f000 fd43 	bl	8002968 <xTaskResumeAll>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f47f af7c 	bne.w	8001de2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8001eea:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <xQueueGenericSend+0x1f8>)
 8001eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	f3bf 8f4f 	dsb	sy
 8001ef6:	f3bf 8f6f 	isb	sy
 8001efa:	e772      	b.n	8001de2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001efc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001efe:	f000 fa17 	bl	8002330 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001f02:	f000 fd31 	bl	8002968 <xTaskResumeAll>
 8001f06:	e76c      	b.n	8001de2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001f08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f0a:	f000 fa11 	bl	8002330 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001f0e:	f000 fd2b 	bl	8002968 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001f12:	2300      	movs	r3, #0
		}
	}
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3738      	adds	r7, #56	; 0x38
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	e000ed04 	.word	0xe000ed04

08001f20 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08e      	sub	sp, #56	; 0x38
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
 8001f2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10a      	bne.n	8001f4e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8001f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f3c:	f383 8811 	msr	BASEPRI, r3
 8001f40:	f3bf 8f6f 	isb	sy
 8001f44:	f3bf 8f4f 	dsb	sy
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001f4a:	bf00      	nop
 8001f4c:	e7fe      	b.n	8001f4c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d103      	bne.n	8001f5c <xQueueGenericSendFromISR+0x3c>
 8001f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <xQueueGenericSendFromISR+0x40>
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e000      	b.n	8001f62 <xQueueGenericSendFromISR+0x42>
 8001f60:	2300      	movs	r3, #0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10a      	bne.n	8001f7c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8001f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f6a:	f383 8811 	msr	BASEPRI, r3
 8001f6e:	f3bf 8f6f 	isb	sy
 8001f72:	f3bf 8f4f 	dsb	sy
 8001f76:	623b      	str	r3, [r7, #32]
}
 8001f78:	bf00      	nop
 8001f7a:	e7fe      	b.n	8001f7a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d103      	bne.n	8001f8a <xQueueGenericSendFromISR+0x6a>
 8001f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <xQueueGenericSendFromISR+0x6e>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <xQueueGenericSendFromISR+0x70>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10a      	bne.n	8001faa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8001f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f98:	f383 8811 	msr	BASEPRI, r3
 8001f9c:	f3bf 8f6f 	isb	sy
 8001fa0:	f3bf 8f4f 	dsb	sy
 8001fa4:	61fb      	str	r3, [r7, #28]
}
 8001fa6:	bf00      	nop
 8001fa8:	e7fe      	b.n	8001fa8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001faa:	f001 fe59 	bl	8003c60 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001fae:	f3ef 8211 	mrs	r2, BASEPRI
 8001fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fb6:	f383 8811 	msr	BASEPRI, r3
 8001fba:	f3bf 8f6f 	isb	sy
 8001fbe:	f3bf 8f4f 	dsb	sy
 8001fc2:	61ba      	str	r2, [r7, #24]
 8001fc4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001fc6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d302      	bcc.n	8001fdc <xQueueGenericSendFromISR+0xbc>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d12c      	bne.n	8002036 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	68b9      	ldr	r1, [r7, #8]
 8001fea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fec:	f000 f910 	bl	8002210 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001ff0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff8:	d112      	bne.n	8002020 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d016      	beq.n	8002030 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002004:	3324      	adds	r3, #36	; 0x24
 8002006:	4618      	mov	r0, r3
 8002008:	f000 fec4 	bl	8002d94 <xTaskRemoveFromEventList>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00e      	beq.n	8002030 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00b      	beq.n	8002030 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	e007      	b.n	8002030 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002020:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002024:	3301      	adds	r3, #1
 8002026:	b2db      	uxtb	r3, r3
 8002028:	b25a      	sxtb	r2, r3
 800202a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800202c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002030:	2301      	movs	r3, #1
 8002032:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002034:	e001      	b.n	800203a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002036:	2300      	movs	r3, #0
 8002038:	637b      	str	r3, [r7, #52]	; 0x34
 800203a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002044:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002048:	4618      	mov	r0, r3
 800204a:	3738      	adds	r7, #56	; 0x38
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b08c      	sub	sp, #48	; 0x30
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800205c:	2300      	movs	r3, #0
 800205e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10a      	bne.n	8002080 <xQueueReceive+0x30>
	__asm volatile
 800206a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800206e:	f383 8811 	msr	BASEPRI, r3
 8002072:	f3bf 8f6f 	isb	sy
 8002076:	f3bf 8f4f 	dsb	sy
 800207a:	623b      	str	r3, [r7, #32]
}
 800207c:	bf00      	nop
 800207e:	e7fe      	b.n	800207e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d103      	bne.n	800208e <xQueueReceive+0x3e>
 8002086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <xQueueReceive+0x42>
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <xQueueReceive+0x44>
 8002092:	2300      	movs	r3, #0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10a      	bne.n	80020ae <xQueueReceive+0x5e>
	__asm volatile
 8002098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800209c:	f383 8811 	msr	BASEPRI, r3
 80020a0:	f3bf 8f6f 	isb	sy
 80020a4:	f3bf 8f4f 	dsb	sy
 80020a8:	61fb      	str	r3, [r7, #28]
}
 80020aa:	bf00      	nop
 80020ac:	e7fe      	b.n	80020ac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80020ae:	f001 f833 	bl	8003118 <xTaskGetSchedulerState>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d102      	bne.n	80020be <xQueueReceive+0x6e>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <xQueueReceive+0x72>
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <xQueueReceive+0x74>
 80020c2:	2300      	movs	r3, #0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10a      	bne.n	80020de <xQueueReceive+0x8e>
	__asm volatile
 80020c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020cc:	f383 8811 	msr	BASEPRI, r3
 80020d0:	f3bf 8f6f 	isb	sy
 80020d4:	f3bf 8f4f 	dsb	sy
 80020d8:	61bb      	str	r3, [r7, #24]
}
 80020da:	bf00      	nop
 80020dc:	e7fe      	b.n	80020dc <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80020de:	f001 fcfd 	bl	8003adc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d01f      	beq.n	800212e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80020ee:	68b9      	ldr	r1, [r7, #8]
 80020f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020f2:	f000 f8f7 	bl	80022e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	1e5a      	subs	r2, r3, #1
 80020fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00f      	beq.n	8002126 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002108:	3310      	adds	r3, #16
 800210a:	4618      	mov	r0, r3
 800210c:	f000 fe42 	bl	8002d94 <xTaskRemoveFromEventList>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d007      	beq.n	8002126 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002116:	4b3d      	ldr	r3, [pc, #244]	; (800220c <xQueueReceive+0x1bc>)
 8002118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	f3bf 8f4f 	dsb	sy
 8002122:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002126:	f001 fd09 	bl	8003b3c <vPortExitCritical>
				return pdPASS;
 800212a:	2301      	movs	r3, #1
 800212c:	e069      	b.n	8002202 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d103      	bne.n	800213c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002134:	f001 fd02 	bl	8003b3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002138:	2300      	movs	r3, #0
 800213a:	e062      	b.n	8002202 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800213c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800213e:	2b00      	cmp	r3, #0
 8002140:	d106      	bne.n	8002150 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002142:	f107 0310 	add.w	r3, r7, #16
 8002146:	4618      	mov	r0, r3
 8002148:	f000 fe88 	bl	8002e5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800214c:	2301      	movs	r3, #1
 800214e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002150:	f001 fcf4 	bl	8003b3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002154:	f000 fbfa 	bl	800294c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002158:	f001 fcc0 	bl	8003adc <vPortEnterCritical>
 800215c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002162:	b25b      	sxtb	r3, r3
 8002164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002168:	d103      	bne.n	8002172 <xQueueReceive+0x122>
 800216a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002174:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002178:	b25b      	sxtb	r3, r3
 800217a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217e:	d103      	bne.n	8002188 <xQueueReceive+0x138>
 8002180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002182:	2200      	movs	r2, #0
 8002184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002188:	f001 fcd8 	bl	8003b3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800218c:	1d3a      	adds	r2, r7, #4
 800218e:	f107 0310 	add.w	r3, r7, #16
 8002192:	4611      	mov	r1, r2
 8002194:	4618      	mov	r0, r3
 8002196:	f000 fe77 	bl	8002e88 <xTaskCheckForTimeOut>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d123      	bne.n	80021e8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80021a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021a2:	f000 f917 	bl	80023d4 <prvIsQueueEmpty>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d017      	beq.n	80021dc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80021ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ae:	3324      	adds	r3, #36	; 0x24
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	4611      	mov	r1, r2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f000 fd9d 	bl	8002cf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80021ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021bc:	f000 f8b8 	bl	8002330 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80021c0:	f000 fbd2 	bl	8002968 <xTaskResumeAll>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d189      	bne.n	80020de <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80021ca:	4b10      	ldr	r3, [pc, #64]	; (800220c <xQueueReceive+0x1bc>)
 80021cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	f3bf 8f4f 	dsb	sy
 80021d6:	f3bf 8f6f 	isb	sy
 80021da:	e780      	b.n	80020de <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80021dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021de:	f000 f8a7 	bl	8002330 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80021e2:	f000 fbc1 	bl	8002968 <xTaskResumeAll>
 80021e6:	e77a      	b.n	80020de <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80021e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021ea:	f000 f8a1 	bl	8002330 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80021ee:	f000 fbbb 	bl	8002968 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80021f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021f4:	f000 f8ee 	bl	80023d4 <prvIsQueueEmpty>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f43f af6f 	beq.w	80020de <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002200:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002202:	4618      	mov	r0, r3
 8002204:	3730      	adds	r7, #48	; 0x30
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	e000ed04 	.word	0xe000ed04

08002210 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800221c:	2300      	movs	r3, #0
 800221e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002224:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10d      	bne.n	800224a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d14d      	bne.n	80022d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	4618      	mov	r0, r3
 800223c:	f000 ff8a 	bl	8003154 <xTaskPriorityDisinherit>
 8002240:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	605a      	str	r2, [r3, #4]
 8002248:	e043      	b.n	80022d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d119      	bne.n	8002284 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6898      	ldr	r0, [r3, #8]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	461a      	mov	r2, r3
 800225a:	68b9      	ldr	r1, [r7, #8]
 800225c:	f001 ff3a 	bl	80040d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	441a      	add	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	429a      	cmp	r2, r3
 8002278:	d32b      	bcc.n	80022d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	609a      	str	r2, [r3, #8]
 8002282:	e026      	b.n	80022d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	68d8      	ldr	r0, [r3, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	461a      	mov	r2, r3
 800228e:	68b9      	ldr	r1, [r7, #8]
 8002290:	f001 ff20 	bl	80040d4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	68da      	ldr	r2, [r3, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229c:	425b      	negs	r3, r3
 800229e:	441a      	add	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d207      	bcs.n	80022c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	425b      	negs	r3, r3
 80022ba:	441a      	add	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d105      	bne.n	80022d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d002      	beq.n	80022d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1c5a      	adds	r2, r3, #1
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80022da:	697b      	ldr	r3, [r7, #20]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d018      	beq.n	8002328 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	441a      	add	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	429a      	cmp	r2, r3
 800230e:	d303      	bcc.n	8002318 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68d9      	ldr	r1, [r3, #12]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	461a      	mov	r2, r3
 8002322:	6838      	ldr	r0, [r7, #0]
 8002324:	f001 fed6 	bl	80040d4 <memcpy>
	}
}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002338:	f001 fbd0 	bl	8003adc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002342:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002344:	e011      	b.n	800236a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234a:	2b00      	cmp	r3, #0
 800234c:	d012      	beq.n	8002374 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3324      	adds	r3, #36	; 0x24
 8002352:	4618      	mov	r0, r3
 8002354:	f000 fd1e 	bl	8002d94 <xTaskRemoveFromEventList>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800235e:	f000 fdf5 	bl	8002f4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	3b01      	subs	r3, #1
 8002366:	b2db      	uxtb	r3, r3
 8002368:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800236a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800236e:	2b00      	cmp	r3, #0
 8002370:	dce9      	bgt.n	8002346 <prvUnlockQueue+0x16>
 8002372:	e000      	b.n	8002376 <prvUnlockQueue+0x46>
					break;
 8002374:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	22ff      	movs	r2, #255	; 0xff
 800237a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800237e:	f001 fbdd 	bl	8003b3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002382:	f001 fbab 	bl	8003adc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800238c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800238e:	e011      	b.n	80023b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d012      	beq.n	80023be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3310      	adds	r3, #16
 800239c:	4618      	mov	r0, r3
 800239e:	f000 fcf9 	bl	8002d94 <xTaskRemoveFromEventList>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80023a8:	f000 fdd0 	bl	8002f4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80023ac:	7bbb      	ldrb	r3, [r7, #14]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80023b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	dce9      	bgt.n	8002390 <prvUnlockQueue+0x60>
 80023bc:	e000      	b.n	80023c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80023be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	22ff      	movs	r2, #255	; 0xff
 80023c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80023c8:	f001 fbb8 	bl	8003b3c <vPortExitCritical>
}
 80023cc:	bf00      	nop
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80023dc:	f001 fb7e 	bl	8003adc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d102      	bne.n	80023ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80023e8:	2301      	movs	r3, #1
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	e001      	b.n	80023f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80023f2:	f001 fba3 	bl	8003b3c <vPortExitCritical>

	return xReturn;
 80023f6:	68fb      	ldr	r3, [r7, #12]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002408:	f001 fb68 	bl	8003adc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002414:	429a      	cmp	r2, r3
 8002416:	d102      	bne.n	800241e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002418:	2301      	movs	r3, #1
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	e001      	b.n	8002422 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002422:	f001 fb8b 	bl	8003b3c <vPortExitCritical>

	return xReturn;
 8002426:	68fb      	ldr	r3, [r7, #12]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	e014      	b.n	800246a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002440:	4a0e      	ldr	r2, [pc, #56]	; (800247c <vQueueAddToRegistry+0x4c>)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10b      	bne.n	8002464 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800244c:	490b      	ldr	r1, [pc, #44]	; (800247c <vQueueAddToRegistry+0x4c>)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002456:	4a09      	ldr	r2, [pc, #36]	; (800247c <vQueueAddToRegistry+0x4c>)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	4413      	add	r3, r2
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002462:	e006      	b.n	8002472 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	3301      	adds	r3, #1
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2b07      	cmp	r3, #7
 800246e:	d9e7      	bls.n	8002440 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002470:	bf00      	nop
 8002472:	bf00      	nop
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr
 800247c:	20000738 	.word	0x20000738

08002480 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002490:	f001 fb24 	bl	8003adc <vPortEnterCritical>
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800249a:	b25b      	sxtb	r3, r3
 800249c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a0:	d103      	bne.n	80024aa <vQueueWaitForMessageRestricted+0x2a>
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024b0:	b25b      	sxtb	r3, r3
 80024b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b6:	d103      	bne.n	80024c0 <vQueueWaitForMessageRestricted+0x40>
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024c0:	f001 fb3c 	bl	8003b3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d106      	bne.n	80024da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	3324      	adds	r3, #36	; 0x24
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	68b9      	ldr	r1, [r7, #8]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f000 fc31 	bl	8002d3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80024da:	6978      	ldr	r0, [r7, #20]
 80024dc:	f7ff ff28 	bl	8002330 <prvUnlockQueue>
	}
 80024e0:	bf00      	nop
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08e      	sub	sp, #56	; 0x38
 80024ec:	af04      	add	r7, sp, #16
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
 80024f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80024f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10a      	bne.n	8002512 <xTaskCreateStatic+0x2a>
	__asm volatile
 80024fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002500:	f383 8811 	msr	BASEPRI, r3
 8002504:	f3bf 8f6f 	isb	sy
 8002508:	f3bf 8f4f 	dsb	sy
 800250c:	623b      	str	r3, [r7, #32]
}
 800250e:	bf00      	nop
 8002510:	e7fe      	b.n	8002510 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10a      	bne.n	800252e <xTaskCreateStatic+0x46>
	__asm volatile
 8002518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800251c:	f383 8811 	msr	BASEPRI, r3
 8002520:	f3bf 8f6f 	isb	sy
 8002524:	f3bf 8f4f 	dsb	sy
 8002528:	61fb      	str	r3, [r7, #28]
}
 800252a:	bf00      	nop
 800252c:	e7fe      	b.n	800252c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800252e:	235c      	movs	r3, #92	; 0x5c
 8002530:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	2b5c      	cmp	r3, #92	; 0x5c
 8002536:	d00a      	beq.n	800254e <xTaskCreateStatic+0x66>
	__asm volatile
 8002538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800253c:	f383 8811 	msr	BASEPRI, r3
 8002540:	f3bf 8f6f 	isb	sy
 8002544:	f3bf 8f4f 	dsb	sy
 8002548:	61bb      	str	r3, [r7, #24]
}
 800254a:	bf00      	nop
 800254c:	e7fe      	b.n	800254c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800254e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002550:	2b00      	cmp	r3, #0
 8002552:	d01e      	beq.n	8002592 <xTaskCreateStatic+0xaa>
 8002554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002556:	2b00      	cmp	r3, #0
 8002558:	d01b      	beq.n	8002592 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800255a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002562:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	2202      	movs	r2, #2
 8002568:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800256c:	2300      	movs	r3, #0
 800256e:	9303      	str	r3, [sp, #12]
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	9302      	str	r3, [sp, #8]
 8002574:	f107 0314 	add.w	r3, r7, #20
 8002578:	9301      	str	r3, [sp, #4]
 800257a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	68b9      	ldr	r1, [r7, #8]
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f000 f850 	bl	800262a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800258a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800258c:	f000 f8d4 	bl	8002738 <prvAddNewTaskToReadyList>
 8002590:	e001      	b.n	8002596 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002596:	697b      	ldr	r3, [r7, #20]
	}
 8002598:	4618      	mov	r0, r3
 800259a:	3728      	adds	r7, #40	; 0x28
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b08c      	sub	sp, #48	; 0x30
 80025a4:	af04      	add	r7, sp, #16
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	603b      	str	r3, [r7, #0]
 80025ac:	4613      	mov	r3, r2
 80025ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025b0:	88fb      	ldrh	r3, [r7, #6]
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4618      	mov	r0, r3
 80025b6:	f001 fb91 	bl	8003cdc <pvPortMalloc>
 80025ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00e      	beq.n	80025e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80025c2:	205c      	movs	r0, #92	; 0x5c
 80025c4:	f001 fb8a 	bl	8003cdc <pvPortMalloc>
 80025c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	631a      	str	r2, [r3, #48]	; 0x30
 80025d6:	e005      	b.n	80025e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80025d8:	6978      	ldr	r0, [r7, #20]
 80025da:	f001 fc43 	bl	8003e64 <vPortFree>
 80025de:	e001      	b.n	80025e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d017      	beq.n	800261a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80025f2:	88fa      	ldrh	r2, [r7, #6]
 80025f4:	2300      	movs	r3, #0
 80025f6:	9303      	str	r3, [sp, #12]
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	9302      	str	r3, [sp, #8]
 80025fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fe:	9301      	str	r3, [sp, #4]
 8002600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	68b9      	ldr	r1, [r7, #8]
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 f80e 	bl	800262a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800260e:	69f8      	ldr	r0, [r7, #28]
 8002610:	f000 f892 	bl	8002738 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002614:	2301      	movs	r3, #1
 8002616:	61bb      	str	r3, [r7, #24]
 8002618:	e002      	b.n	8002620 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800261a:	f04f 33ff 	mov.w	r3, #4294967295
 800261e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002620:	69bb      	ldr	r3, [r7, #24]
	}
 8002622:	4618      	mov	r0, r3
 8002624:	3720      	adds	r7, #32
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b088      	sub	sp, #32
 800262e:	af00      	add	r7, sp, #0
 8002630:	60f8      	str	r0, [r7, #12]
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	607a      	str	r2, [r7, #4]
 8002636:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	461a      	mov	r2, r3
 8002642:	21a5      	movs	r1, #165	; 0xa5
 8002644:	f001 fd54 	bl	80040f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002652:	3b01      	subs	r3, #1
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	f023 0307 	bic.w	r3, r3, #7
 8002660:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00a      	beq.n	8002682 <prvInitialiseNewTask+0x58>
	__asm volatile
 800266c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002670:	f383 8811 	msr	BASEPRI, r3
 8002674:	f3bf 8f6f 	isb	sy
 8002678:	f3bf 8f4f 	dsb	sy
 800267c:	617b      	str	r3, [r7, #20]
}
 800267e:	bf00      	nop
 8002680:	e7fe      	b.n	8002680 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002682:	2300      	movs	r3, #0
 8002684:	61fb      	str	r3, [r7, #28]
 8002686:	e012      	b.n	80026ae <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	4413      	add	r3, r2
 800268e:	7819      	ldrb	r1, [r3, #0]
 8002690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	4413      	add	r3, r2
 8002696:	3334      	adds	r3, #52	; 0x34
 8002698:	460a      	mov	r2, r1
 800269a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	4413      	add	r3, r2
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d006      	beq.n	80026b6 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	3301      	adds	r3, #1
 80026ac:	61fb      	str	r3, [r7, #28]
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	2b0f      	cmp	r3, #15
 80026b2:	d9e9      	bls.n	8002688 <prvInitialiseNewTask+0x5e>
 80026b4:	e000      	b.n	80026b8 <prvInitialiseNewTask+0x8e>
		{
			break;
 80026b6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80026b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80026c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c2:	2b37      	cmp	r3, #55	; 0x37
 80026c4:	d901      	bls.n	80026ca <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80026c6:	2337      	movs	r3, #55	; 0x37
 80026c8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80026ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026ce:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80026d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026d4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80026d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d8:	2200      	movs	r2, #0
 80026da:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80026dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026de:	3304      	adds	r3, #4
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff f98c 	bl	80019fe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80026e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e8:	3318      	adds	r3, #24
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff f987 	bl	80019fe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80026f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026f4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80026fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002704:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002708:	2200      	movs	r2, #0
 800270a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800270c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	68f9      	ldr	r1, [r7, #12]
 8002718:	69b8      	ldr	r0, [r7, #24]
 800271a:	f001 f8ef 	bl	80038fc <pxPortInitialiseStack>
 800271e:	4602      	mov	r2, r0
 8002720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002722:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002726:	2b00      	cmp	r3, #0
 8002728:	d002      	beq.n	8002730 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800272a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800272e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002730:	bf00      	nop
 8002732:	3720      	adds	r7, #32
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002740:	f001 f9cc 	bl	8003adc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002744:	4b2d      	ldr	r3, [pc, #180]	; (80027fc <prvAddNewTaskToReadyList+0xc4>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	3301      	adds	r3, #1
 800274a:	4a2c      	ldr	r2, [pc, #176]	; (80027fc <prvAddNewTaskToReadyList+0xc4>)
 800274c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800274e:	4b2c      	ldr	r3, [pc, #176]	; (8002800 <prvAddNewTaskToReadyList+0xc8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d109      	bne.n	800276a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002756:	4a2a      	ldr	r2, [pc, #168]	; (8002800 <prvAddNewTaskToReadyList+0xc8>)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800275c:	4b27      	ldr	r3, [pc, #156]	; (80027fc <prvAddNewTaskToReadyList+0xc4>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d110      	bne.n	8002786 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002764:	f000 fc16 	bl	8002f94 <prvInitialiseTaskLists>
 8002768:	e00d      	b.n	8002786 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800276a:	4b26      	ldr	r3, [pc, #152]	; (8002804 <prvAddNewTaskToReadyList+0xcc>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d109      	bne.n	8002786 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002772:	4b23      	ldr	r3, [pc, #140]	; (8002800 <prvAddNewTaskToReadyList+0xc8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277c:	429a      	cmp	r2, r3
 800277e:	d802      	bhi.n	8002786 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002780:	4a1f      	ldr	r2, [pc, #124]	; (8002800 <prvAddNewTaskToReadyList+0xc8>)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002786:	4b20      	ldr	r3, [pc, #128]	; (8002808 <prvAddNewTaskToReadyList+0xd0>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	3301      	adds	r3, #1
 800278c:	4a1e      	ldr	r2, [pc, #120]	; (8002808 <prvAddNewTaskToReadyList+0xd0>)
 800278e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002790:	4b1d      	ldr	r3, [pc, #116]	; (8002808 <prvAddNewTaskToReadyList+0xd0>)
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800279c:	4b1b      	ldr	r3, [pc, #108]	; (800280c <prvAddNewTaskToReadyList+0xd4>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d903      	bls.n	80027ac <prvAddNewTaskToReadyList+0x74>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a8:	4a18      	ldr	r2, [pc, #96]	; (800280c <prvAddNewTaskToReadyList+0xd4>)
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4a15      	ldr	r2, [pc, #84]	; (8002810 <prvAddNewTaskToReadyList+0xd8>)
 80027ba:	441a      	add	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3304      	adds	r3, #4
 80027c0:	4619      	mov	r1, r3
 80027c2:	4610      	mov	r0, r2
 80027c4:	f7ff f927 	bl	8001a16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80027c8:	f001 f9b8 	bl	8003b3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80027cc:	4b0d      	ldr	r3, [pc, #52]	; (8002804 <prvAddNewTaskToReadyList+0xcc>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00e      	beq.n	80027f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80027d4:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <prvAddNewTaskToReadyList+0xc8>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027de:	429a      	cmp	r2, r3
 80027e0:	d207      	bcs.n	80027f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80027e2:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <prvAddNewTaskToReadyList+0xdc>)
 80027e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	f3bf 8f4f 	dsb	sy
 80027ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000c4c 	.word	0x20000c4c
 8002800:	20000778 	.word	0x20000778
 8002804:	20000c58 	.word	0x20000c58
 8002808:	20000c68 	.word	0x20000c68
 800280c:	20000c54 	.word	0x20000c54
 8002810:	2000077c 	.word	0x2000077c
 8002814:	e000ed04 	.word	0xe000ed04

08002818 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002820:	2300      	movs	r3, #0
 8002822:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d017      	beq.n	800285a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800282a:	4b13      	ldr	r3, [pc, #76]	; (8002878 <vTaskDelay+0x60>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00a      	beq.n	8002848 <vTaskDelay+0x30>
	__asm volatile
 8002832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002836:	f383 8811 	msr	BASEPRI, r3
 800283a:	f3bf 8f6f 	isb	sy
 800283e:	f3bf 8f4f 	dsb	sy
 8002842:	60bb      	str	r3, [r7, #8]
}
 8002844:	bf00      	nop
 8002846:	e7fe      	b.n	8002846 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002848:	f000 f880 	bl	800294c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800284c:	2100      	movs	r1, #0
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 fcee 	bl	8003230 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002854:	f000 f888 	bl	8002968 <xTaskResumeAll>
 8002858:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d107      	bne.n	8002870 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002860:	4b06      	ldr	r3, [pc, #24]	; (800287c <vTaskDelay+0x64>)
 8002862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	f3bf 8f4f 	dsb	sy
 800286c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002870:	bf00      	nop
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20000c74 	.word	0x20000c74
 800287c:	e000ed04 	.word	0xe000ed04

08002880 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08a      	sub	sp, #40	; 0x28
 8002884:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002886:	2300      	movs	r3, #0
 8002888:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800288a:	2300      	movs	r3, #0
 800288c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800288e:	463a      	mov	r2, r7
 8002890:	1d39      	adds	r1, r7, #4
 8002892:	f107 0308 	add.w	r3, r7, #8
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff f860 	bl	800195c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800289c:	6839      	ldr	r1, [r7, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	9202      	str	r2, [sp, #8]
 80028a4:	9301      	str	r3, [sp, #4]
 80028a6:	2300      	movs	r3, #0
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	2300      	movs	r3, #0
 80028ac:	460a      	mov	r2, r1
 80028ae:	4921      	ldr	r1, [pc, #132]	; (8002934 <vTaskStartScheduler+0xb4>)
 80028b0:	4821      	ldr	r0, [pc, #132]	; (8002938 <vTaskStartScheduler+0xb8>)
 80028b2:	f7ff fe19 	bl	80024e8 <xTaskCreateStatic>
 80028b6:	4603      	mov	r3, r0
 80028b8:	4a20      	ldr	r2, [pc, #128]	; (800293c <vTaskStartScheduler+0xbc>)
 80028ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80028bc:	4b1f      	ldr	r3, [pc, #124]	; (800293c <vTaskStartScheduler+0xbc>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d002      	beq.n	80028ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80028c4:	2301      	movs	r3, #1
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	e001      	b.n	80028ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d102      	bne.n	80028da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80028d4:	f000 fd00 	bl	80032d8 <xTimerCreateTimerTask>
 80028d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d116      	bne.n	800290e <vTaskStartScheduler+0x8e>
	__asm volatile
 80028e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e4:	f383 8811 	msr	BASEPRI, r3
 80028e8:	f3bf 8f6f 	isb	sy
 80028ec:	f3bf 8f4f 	dsb	sy
 80028f0:	613b      	str	r3, [r7, #16]
}
 80028f2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80028f4:	4b12      	ldr	r3, [pc, #72]	; (8002940 <vTaskStartScheduler+0xc0>)
 80028f6:	f04f 32ff 	mov.w	r2, #4294967295
 80028fa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80028fc:	4b11      	ldr	r3, [pc, #68]	; (8002944 <vTaskStartScheduler+0xc4>)
 80028fe:	2201      	movs	r2, #1
 8002900:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002902:	4b11      	ldr	r3, [pc, #68]	; (8002948 <vTaskStartScheduler+0xc8>)
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002908:	f001 f876 	bl	80039f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800290c:	e00e      	b.n	800292c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002914:	d10a      	bne.n	800292c <vTaskStartScheduler+0xac>
	__asm volatile
 8002916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800291a:	f383 8811 	msr	BASEPRI, r3
 800291e:	f3bf 8f6f 	isb	sy
 8002922:	f3bf 8f4f 	dsb	sy
 8002926:	60fb      	str	r3, [r7, #12]
}
 8002928:	bf00      	nop
 800292a:	e7fe      	b.n	800292a <vTaskStartScheduler+0xaa>
}
 800292c:	bf00      	nop
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	08004130 	.word	0x08004130
 8002938:	08002f65 	.word	0x08002f65
 800293c:	20000c70 	.word	0x20000c70
 8002940:	20000c6c 	.word	0x20000c6c
 8002944:	20000c58 	.word	0x20000c58
 8002948:	20000c50 	.word	0x20000c50

0800294c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002950:	4b04      	ldr	r3, [pc, #16]	; (8002964 <vTaskSuspendAll+0x18>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	3301      	adds	r3, #1
 8002956:	4a03      	ldr	r2, [pc, #12]	; (8002964 <vTaskSuspendAll+0x18>)
 8002958:	6013      	str	r3, [r2, #0]
}
 800295a:	bf00      	nop
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	20000c74 	.word	0x20000c74

08002968 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800296e:	2300      	movs	r3, #0
 8002970:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002972:	2300      	movs	r3, #0
 8002974:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002976:	4b42      	ldr	r3, [pc, #264]	; (8002a80 <xTaskResumeAll+0x118>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10a      	bne.n	8002994 <xTaskResumeAll+0x2c>
	__asm volatile
 800297e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002982:	f383 8811 	msr	BASEPRI, r3
 8002986:	f3bf 8f6f 	isb	sy
 800298a:	f3bf 8f4f 	dsb	sy
 800298e:	603b      	str	r3, [r7, #0]
}
 8002990:	bf00      	nop
 8002992:	e7fe      	b.n	8002992 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002994:	f001 f8a2 	bl	8003adc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002998:	4b39      	ldr	r3, [pc, #228]	; (8002a80 <xTaskResumeAll+0x118>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	3b01      	subs	r3, #1
 800299e:	4a38      	ldr	r2, [pc, #224]	; (8002a80 <xTaskResumeAll+0x118>)
 80029a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029a2:	4b37      	ldr	r3, [pc, #220]	; (8002a80 <xTaskResumeAll+0x118>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d162      	bne.n	8002a70 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80029aa:	4b36      	ldr	r3, [pc, #216]	; (8002a84 <xTaskResumeAll+0x11c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d05e      	beq.n	8002a70 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029b2:	e02f      	b.n	8002a14 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80029b4:	4b34      	ldr	r3, [pc, #208]	; (8002a88 <xTaskResumeAll+0x120>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	3318      	adds	r3, #24
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff f883 	bl	8001acc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	3304      	adds	r3, #4
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff f87e 	bl	8001acc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d4:	4b2d      	ldr	r3, [pc, #180]	; (8002a8c <xTaskResumeAll+0x124>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d903      	bls.n	80029e4 <xTaskResumeAll+0x7c>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e0:	4a2a      	ldr	r2, [pc, #168]	; (8002a8c <xTaskResumeAll+0x124>)
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e8:	4613      	mov	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4a27      	ldr	r2, [pc, #156]	; (8002a90 <xTaskResumeAll+0x128>)
 80029f2:	441a      	add	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	3304      	adds	r3, #4
 80029f8:	4619      	mov	r1, r3
 80029fa:	4610      	mov	r0, r2
 80029fc:	f7ff f80b 	bl	8001a16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a04:	4b23      	ldr	r3, [pc, #140]	; (8002a94 <xTaskResumeAll+0x12c>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d302      	bcc.n	8002a14 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002a0e:	4b22      	ldr	r3, [pc, #136]	; (8002a98 <xTaskResumeAll+0x130>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a14:	4b1c      	ldr	r3, [pc, #112]	; (8002a88 <xTaskResumeAll+0x120>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1cb      	bne.n	80029b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002a22:	f000 fb55 	bl	80030d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002a26:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <xTaskResumeAll+0x134>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d010      	beq.n	8002a54 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002a32:	f000 f845 	bl	8002ac0 <xTaskIncrementTick>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d002      	beq.n	8002a42 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002a3c:	4b16      	ldr	r3, [pc, #88]	; (8002a98 <xTaskResumeAll+0x130>)
 8002a3e:	2201      	movs	r2, #1
 8002a40:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	3b01      	subs	r3, #1
 8002a46:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f1      	bne.n	8002a32 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8002a4e:	4b13      	ldr	r3, [pc, #76]	; (8002a9c <xTaskResumeAll+0x134>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002a54:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <xTaskResumeAll+0x130>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d009      	beq.n	8002a70 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002a60:	4b0f      	ldr	r3, [pc, #60]	; (8002aa0 <xTaskResumeAll+0x138>)
 8002a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	f3bf 8f4f 	dsb	sy
 8002a6c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002a70:	f001 f864 	bl	8003b3c <vPortExitCritical>

	return xAlreadyYielded;
 8002a74:	68bb      	ldr	r3, [r7, #8]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20000c74 	.word	0x20000c74
 8002a84:	20000c4c 	.word	0x20000c4c
 8002a88:	20000c0c 	.word	0x20000c0c
 8002a8c:	20000c54 	.word	0x20000c54
 8002a90:	2000077c 	.word	0x2000077c
 8002a94:	20000778 	.word	0x20000778
 8002a98:	20000c60 	.word	0x20000c60
 8002a9c:	20000c5c 	.word	0x20000c5c
 8002aa0:	e000ed04 	.word	0xe000ed04

08002aa4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002aaa:	4b04      	ldr	r3, [pc, #16]	; (8002abc <xTaskGetTickCount+0x18>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002ab0:	687b      	ldr	r3, [r7, #4]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr
 8002abc:	20000c50 	.word	0x20000c50

08002ac0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002aca:	4b51      	ldr	r3, [pc, #324]	; (8002c10 <xTaskIncrementTick+0x150>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f040 808e 	bne.w	8002bf0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ad4:	4b4f      	ldr	r3, [pc, #316]	; (8002c14 <xTaskIncrementTick+0x154>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002adc:	4a4d      	ldr	r2, [pc, #308]	; (8002c14 <xTaskIncrementTick+0x154>)
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d120      	bne.n	8002b2a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002ae8:	4b4b      	ldr	r3, [pc, #300]	; (8002c18 <xTaskIncrementTick+0x158>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00a      	beq.n	8002b08 <xTaskIncrementTick+0x48>
	__asm volatile
 8002af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af6:	f383 8811 	msr	BASEPRI, r3
 8002afa:	f3bf 8f6f 	isb	sy
 8002afe:	f3bf 8f4f 	dsb	sy
 8002b02:	603b      	str	r3, [r7, #0]
}
 8002b04:	bf00      	nop
 8002b06:	e7fe      	b.n	8002b06 <xTaskIncrementTick+0x46>
 8002b08:	4b43      	ldr	r3, [pc, #268]	; (8002c18 <xTaskIncrementTick+0x158>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	4b43      	ldr	r3, [pc, #268]	; (8002c1c <xTaskIncrementTick+0x15c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a41      	ldr	r2, [pc, #260]	; (8002c18 <xTaskIncrementTick+0x158>)
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	4a41      	ldr	r2, [pc, #260]	; (8002c1c <xTaskIncrementTick+0x15c>)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6013      	str	r3, [r2, #0]
 8002b1c:	4b40      	ldr	r3, [pc, #256]	; (8002c20 <xTaskIncrementTick+0x160>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	3301      	adds	r3, #1
 8002b22:	4a3f      	ldr	r2, [pc, #252]	; (8002c20 <xTaskIncrementTick+0x160>)
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	f000 fad3 	bl	80030d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002b2a:	4b3e      	ldr	r3, [pc, #248]	; (8002c24 <xTaskIncrementTick+0x164>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d34e      	bcc.n	8002bd2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b34:	4b38      	ldr	r3, [pc, #224]	; (8002c18 <xTaskIncrementTick+0x158>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <xTaskIncrementTick+0x82>
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e000      	b.n	8002b44 <xTaskIncrementTick+0x84>
 8002b42:	2300      	movs	r3, #0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d004      	beq.n	8002b52 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b48:	4b36      	ldr	r3, [pc, #216]	; (8002c24 <xTaskIncrementTick+0x164>)
 8002b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b4e:	601a      	str	r2, [r3, #0]
					break;
 8002b50:	e03f      	b.n	8002bd2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002b52:	4b31      	ldr	r3, [pc, #196]	; (8002c18 <xTaskIncrementTick+0x158>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d203      	bcs.n	8002b72 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002b6a:	4a2e      	ldr	r2, [pc, #184]	; (8002c24 <xTaskIncrementTick+0x164>)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6013      	str	r3, [r2, #0]
						break;
 8002b70:	e02f      	b.n	8002bd2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	3304      	adds	r3, #4
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe ffa8 	bl	8001acc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d004      	beq.n	8002b8e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	3318      	adds	r3, #24
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fe ff9f 	bl	8001acc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b92:	4b25      	ldr	r3, [pc, #148]	; (8002c28 <xTaskIncrementTick+0x168>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d903      	bls.n	8002ba2 <xTaskIncrementTick+0xe2>
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9e:	4a22      	ldr	r2, [pc, #136]	; (8002c28 <xTaskIncrementTick+0x168>)
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4a1f      	ldr	r2, [pc, #124]	; (8002c2c <xTaskIncrementTick+0x16c>)
 8002bb0:	441a      	add	r2, r3
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4610      	mov	r0, r2
 8002bba:	f7fe ff2c 	bl	8001a16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc2:	4b1b      	ldr	r3, [pc, #108]	; (8002c30 <xTaskIncrementTick+0x170>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d3b3      	bcc.n	8002b34 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bd0:	e7b0      	b.n	8002b34 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002bd2:	4b17      	ldr	r3, [pc, #92]	; (8002c30 <xTaskIncrementTick+0x170>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd8:	4914      	ldr	r1, [pc, #80]	; (8002c2c <xTaskIncrementTick+0x16c>)
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	440b      	add	r3, r1
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d907      	bls.n	8002bfa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002bea:	2301      	movs	r3, #1
 8002bec:	617b      	str	r3, [r7, #20]
 8002bee:	e004      	b.n	8002bfa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002bf0:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <xTaskIncrementTick+0x174>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	4a0f      	ldr	r2, [pc, #60]	; (8002c34 <xTaskIncrementTick+0x174>)
 8002bf8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002bfa:	4b0f      	ldr	r3, [pc, #60]	; (8002c38 <xTaskIncrementTick+0x178>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8002c02:	2301      	movs	r3, #1
 8002c04:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002c06:	697b      	ldr	r3, [r7, #20]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	20000c74 	.word	0x20000c74
 8002c14:	20000c50 	.word	0x20000c50
 8002c18:	20000c04 	.word	0x20000c04
 8002c1c:	20000c08 	.word	0x20000c08
 8002c20:	20000c64 	.word	0x20000c64
 8002c24:	20000c6c 	.word	0x20000c6c
 8002c28:	20000c54 	.word	0x20000c54
 8002c2c:	2000077c 	.word	0x2000077c
 8002c30:	20000778 	.word	0x20000778
 8002c34:	20000c5c 	.word	0x20000c5c
 8002c38:	20000c60 	.word	0x20000c60

08002c3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002c42:	4b27      	ldr	r3, [pc, #156]	; (8002ce0 <vTaskSwitchContext+0xa4>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002c4a:	4b26      	ldr	r3, [pc, #152]	; (8002ce4 <vTaskSwitchContext+0xa8>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002c50:	e041      	b.n	8002cd6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8002c52:	4b24      	ldr	r3, [pc, #144]	; (8002ce4 <vTaskSwitchContext+0xa8>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002c58:	4b23      	ldr	r3, [pc, #140]	; (8002ce8 <vTaskSwitchContext+0xac>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	e010      	b.n	8002c82 <vTaskSwitchContext+0x46>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10a      	bne.n	8002c7c <vTaskSwitchContext+0x40>
	__asm volatile
 8002c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6a:	f383 8811 	msr	BASEPRI, r3
 8002c6e:	f3bf 8f6f 	isb	sy
 8002c72:	f3bf 8f4f 	dsb	sy
 8002c76:	607b      	str	r3, [r7, #4]
}
 8002c78:	bf00      	nop
 8002c7a:	e7fe      	b.n	8002c7a <vTaskSwitchContext+0x3e>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	491a      	ldr	r1, [pc, #104]	; (8002cec <vTaskSwitchContext+0xb0>)
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	440b      	add	r3, r1
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0e4      	beq.n	8002c60 <vTaskSwitchContext+0x24>
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4a12      	ldr	r2, [pc, #72]	; (8002cec <vTaskSwitchContext+0xb0>)
 8002ca2:	4413      	add	r3, r2
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	605a      	str	r2, [r3, #4]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	3308      	adds	r3, #8
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d104      	bne.n	8002cc6 <vTaskSwitchContext+0x8a>
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	605a      	str	r2, [r3, #4]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	4a08      	ldr	r2, [pc, #32]	; (8002cf0 <vTaskSwitchContext+0xb4>)
 8002cce:	6013      	str	r3, [r2, #0]
 8002cd0:	4a05      	ldr	r2, [pc, #20]	; (8002ce8 <vTaskSwitchContext+0xac>)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6013      	str	r3, [r2, #0]
}
 8002cd6:	bf00      	nop
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr
 8002ce0:	20000c74 	.word	0x20000c74
 8002ce4:	20000c60 	.word	0x20000c60
 8002ce8:	20000c54 	.word	0x20000c54
 8002cec:	2000077c 	.word	0x2000077c
 8002cf0:	20000778 	.word	0x20000778

08002cf4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10a      	bne.n	8002d1a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d08:	f383 8811 	msr	BASEPRI, r3
 8002d0c:	f3bf 8f6f 	isb	sy
 8002d10:	f3bf 8f4f 	dsb	sy
 8002d14:	60fb      	str	r3, [r7, #12]
}
 8002d16:	bf00      	nop
 8002d18:	e7fe      	b.n	8002d18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002d1a:	4b07      	ldr	r3, [pc, #28]	; (8002d38 <vTaskPlaceOnEventList+0x44>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	3318      	adds	r3, #24
 8002d20:	4619      	mov	r1, r3
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7fe fe9a 	bl	8001a5c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002d28:	2101      	movs	r1, #1
 8002d2a:	6838      	ldr	r0, [r7, #0]
 8002d2c:	f000 fa80 	bl	8003230 <prvAddCurrentTaskToDelayedList>
}
 8002d30:	bf00      	nop
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	20000778 	.word	0x20000778

08002d3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10a      	bne.n	8002d64 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8002d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d52:	f383 8811 	msr	BASEPRI, r3
 8002d56:	f3bf 8f6f 	isb	sy
 8002d5a:	f3bf 8f4f 	dsb	sy
 8002d5e:	617b      	str	r3, [r7, #20]
}
 8002d60:	bf00      	nop
 8002d62:	e7fe      	b.n	8002d62 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002d64:	4b0a      	ldr	r3, [pc, #40]	; (8002d90 <vTaskPlaceOnEventListRestricted+0x54>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	3318      	adds	r3, #24
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f7fe fe52 	bl	8001a16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d002      	beq.n	8002d7e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8002d78:	f04f 33ff 	mov.w	r3, #4294967295
 8002d7c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	68b8      	ldr	r0, [r7, #8]
 8002d82:	f000 fa55 	bl	8003230 <prvAddCurrentTaskToDelayedList>
	}
 8002d86:	bf00      	nop
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	20000778 	.word	0x20000778

08002d94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10a      	bne.n	8002dc0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dae:	f383 8811 	msr	BASEPRI, r3
 8002db2:	f3bf 8f6f 	isb	sy
 8002db6:	f3bf 8f4f 	dsb	sy
 8002dba:	60fb      	str	r3, [r7, #12]
}
 8002dbc:	bf00      	nop
 8002dbe:	e7fe      	b.n	8002dbe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	3318      	adds	r3, #24
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fe fe81 	bl	8001acc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002dca:	4b1e      	ldr	r3, [pc, #120]	; (8002e44 <xTaskRemoveFromEventList+0xb0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d11d      	bne.n	8002e0e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fe fe78 	bl	8001acc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de0:	4b19      	ldr	r3, [pc, #100]	; (8002e48 <xTaskRemoveFromEventList+0xb4>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d903      	bls.n	8002df0 <xTaskRemoveFromEventList+0x5c>
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dec:	4a16      	ldr	r2, [pc, #88]	; (8002e48 <xTaskRemoveFromEventList+0xb4>)
 8002dee:	6013      	str	r3, [r2, #0]
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df4:	4613      	mov	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4a13      	ldr	r2, [pc, #76]	; (8002e4c <xTaskRemoveFromEventList+0xb8>)
 8002dfe:	441a      	add	r2, r3
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	3304      	adds	r3, #4
 8002e04:	4619      	mov	r1, r3
 8002e06:	4610      	mov	r0, r2
 8002e08:	f7fe fe05 	bl	8001a16 <vListInsertEnd>
 8002e0c:	e005      	b.n	8002e1a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	3318      	adds	r3, #24
 8002e12:	4619      	mov	r1, r3
 8002e14:	480e      	ldr	r0, [pc, #56]	; (8002e50 <xTaskRemoveFromEventList+0xbc>)
 8002e16:	f7fe fdfe 	bl	8001a16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e1e:	4b0d      	ldr	r3, [pc, #52]	; (8002e54 <xTaskRemoveFromEventList+0xc0>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d905      	bls.n	8002e34 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002e2c:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <xTaskRemoveFromEventList+0xc4>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	e001      	b.n	8002e38 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002e38:	697b      	ldr	r3, [r7, #20]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3718      	adds	r7, #24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20000c74 	.word	0x20000c74
 8002e48:	20000c54 	.word	0x20000c54
 8002e4c:	2000077c 	.word	0x2000077c
 8002e50:	20000c0c 	.word	0x20000c0c
 8002e54:	20000778 	.word	0x20000778
 8002e58:	20000c60 	.word	0x20000c60

08002e5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002e64:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <vTaskInternalSetTimeOutState+0x24>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002e6c:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <vTaskInternalSetTimeOutState+0x28>)
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	605a      	str	r2, [r3, #4]
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bc80      	pop	{r7}
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	20000c64 	.word	0x20000c64
 8002e84:	20000c50 	.word	0x20000c50

08002e88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b088      	sub	sp, #32
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10a      	bne.n	8002eae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9c:	f383 8811 	msr	BASEPRI, r3
 8002ea0:	f3bf 8f6f 	isb	sy
 8002ea4:	f3bf 8f4f 	dsb	sy
 8002ea8:	613b      	str	r3, [r7, #16]
}
 8002eaa:	bf00      	nop
 8002eac:	e7fe      	b.n	8002eac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10a      	bne.n	8002eca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8002eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb8:	f383 8811 	msr	BASEPRI, r3
 8002ebc:	f3bf 8f6f 	isb	sy
 8002ec0:	f3bf 8f4f 	dsb	sy
 8002ec4:	60fb      	str	r3, [r7, #12]
}
 8002ec6:	bf00      	nop
 8002ec8:	e7fe      	b.n	8002ec8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8002eca:	f000 fe07 	bl	8003adc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002ece:	4b1d      	ldr	r3, [pc, #116]	; (8002f44 <xTaskCheckForTimeOut+0xbc>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee6:	d102      	bne.n	8002eee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	61fb      	str	r3, [r7, #28]
 8002eec:	e023      	b.n	8002f36 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	4b15      	ldr	r3, [pc, #84]	; (8002f48 <xTaskCheckForTimeOut+0xc0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d007      	beq.n	8002f0a <xTaskCheckForTimeOut+0x82>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d302      	bcc.n	8002f0a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002f04:	2301      	movs	r3, #1
 8002f06:	61fb      	str	r3, [r7, #28]
 8002f08:	e015      	b.n	8002f36 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d20b      	bcs.n	8002f2c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	1ad2      	subs	r2, r2, r3
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7ff ff9b 	bl	8002e5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002f26:	2300      	movs	r3, #0
 8002f28:	61fb      	str	r3, [r7, #28]
 8002f2a:	e004      	b.n	8002f36 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002f32:	2301      	movs	r3, #1
 8002f34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002f36:	f000 fe01 	bl	8003b3c <vPortExitCritical>

	return xReturn;
 8002f3a:	69fb      	ldr	r3, [r7, #28]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3720      	adds	r7, #32
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	20000c50 	.word	0x20000c50
 8002f48:	20000c64 	.word	0x20000c64

08002f4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002f50:	4b03      	ldr	r3, [pc, #12]	; (8002f60 <vTaskMissedYield+0x14>)
 8002f52:	2201      	movs	r2, #1
 8002f54:	601a      	str	r2, [r3, #0]
}
 8002f56:	bf00      	nop
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	20000c60 	.word	0x20000c60

08002f64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002f6c:	f000 f852 	bl	8003014 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002f70:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <prvIdleTask+0x28>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d9f9      	bls.n	8002f6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8002f78:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <prvIdleTask+0x2c>)
 8002f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	f3bf 8f4f 	dsb	sy
 8002f84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002f88:	e7f0      	b.n	8002f6c <prvIdleTask+0x8>
 8002f8a:	bf00      	nop
 8002f8c:	2000077c 	.word	0x2000077c
 8002f90:	e000ed04 	.word	0xe000ed04

08002f94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	607b      	str	r3, [r7, #4]
 8002f9e:	e00c      	b.n	8002fba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4a12      	ldr	r2, [pc, #72]	; (8002ff4 <prvInitialiseTaskLists+0x60>)
 8002fac:	4413      	add	r3, r2
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fe fd06 	bl	80019c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	607b      	str	r3, [r7, #4]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b37      	cmp	r3, #55	; 0x37
 8002fbe:	d9ef      	bls.n	8002fa0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002fc0:	480d      	ldr	r0, [pc, #52]	; (8002ff8 <prvInitialiseTaskLists+0x64>)
 8002fc2:	f7fe fcfd 	bl	80019c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002fc6:	480d      	ldr	r0, [pc, #52]	; (8002ffc <prvInitialiseTaskLists+0x68>)
 8002fc8:	f7fe fcfa 	bl	80019c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002fcc:	480c      	ldr	r0, [pc, #48]	; (8003000 <prvInitialiseTaskLists+0x6c>)
 8002fce:	f7fe fcf7 	bl	80019c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002fd2:	480c      	ldr	r0, [pc, #48]	; (8003004 <prvInitialiseTaskLists+0x70>)
 8002fd4:	f7fe fcf4 	bl	80019c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002fd8:	480b      	ldr	r0, [pc, #44]	; (8003008 <prvInitialiseTaskLists+0x74>)
 8002fda:	f7fe fcf1 	bl	80019c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002fde:	4b0b      	ldr	r3, [pc, #44]	; (800300c <prvInitialiseTaskLists+0x78>)
 8002fe0:	4a05      	ldr	r2, [pc, #20]	; (8002ff8 <prvInitialiseTaskLists+0x64>)
 8002fe2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002fe4:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <prvInitialiseTaskLists+0x7c>)
 8002fe6:	4a05      	ldr	r2, [pc, #20]	; (8002ffc <prvInitialiseTaskLists+0x68>)
 8002fe8:	601a      	str	r2, [r3, #0]
}
 8002fea:	bf00      	nop
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	2000077c 	.word	0x2000077c
 8002ff8:	20000bdc 	.word	0x20000bdc
 8002ffc:	20000bf0 	.word	0x20000bf0
 8003000:	20000c0c 	.word	0x20000c0c
 8003004:	20000c20 	.word	0x20000c20
 8003008:	20000c38 	.word	0x20000c38
 800300c:	20000c04 	.word	0x20000c04
 8003010:	20000c08 	.word	0x20000c08

08003014 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800301a:	e019      	b.n	8003050 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800301c:	f000 fd5e 	bl	8003adc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003020:	4b10      	ldr	r3, [pc, #64]	; (8003064 <prvCheckTasksWaitingTermination+0x50>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3304      	adds	r3, #4
 800302c:	4618      	mov	r0, r3
 800302e:	f7fe fd4d 	bl	8001acc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003032:	4b0d      	ldr	r3, [pc, #52]	; (8003068 <prvCheckTasksWaitingTermination+0x54>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	3b01      	subs	r3, #1
 8003038:	4a0b      	ldr	r2, [pc, #44]	; (8003068 <prvCheckTasksWaitingTermination+0x54>)
 800303a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800303c:	4b0b      	ldr	r3, [pc, #44]	; (800306c <prvCheckTasksWaitingTermination+0x58>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	3b01      	subs	r3, #1
 8003042:	4a0a      	ldr	r2, [pc, #40]	; (800306c <prvCheckTasksWaitingTermination+0x58>)
 8003044:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003046:	f000 fd79 	bl	8003b3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f810 	bl	8003070 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003050:	4b06      	ldr	r3, [pc, #24]	; (800306c <prvCheckTasksWaitingTermination+0x58>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1e1      	bne.n	800301c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003058:	bf00      	nop
 800305a:	bf00      	nop
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20000c20 	.word	0x20000c20
 8003068:	20000c4c 	.word	0x20000c4c
 800306c:	20000c34 	.word	0x20000c34

08003070 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800307e:	2b00      	cmp	r3, #0
 8003080:	d108      	bne.n	8003094 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	4618      	mov	r0, r3
 8003088:	f000 feec 	bl	8003e64 <vPortFree>
				vPortFree( pxTCB );
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fee9 	bl	8003e64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003092:	e018      	b.n	80030c6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800309a:	2b01      	cmp	r3, #1
 800309c:	d103      	bne.n	80030a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fee0 	bl	8003e64 <vPortFree>
	}
 80030a4:	e00f      	b.n	80030c6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d00a      	beq.n	80030c6 <prvDeleteTCB+0x56>
	__asm volatile
 80030b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b4:	f383 8811 	msr	BASEPRI, r3
 80030b8:	f3bf 8f6f 	isb	sy
 80030bc:	f3bf 8f4f 	dsb	sy
 80030c0:	60fb      	str	r3, [r7, #12]
}
 80030c2:	bf00      	nop
 80030c4:	e7fe      	b.n	80030c4 <prvDeleteTCB+0x54>
	}
 80030c6:	bf00      	nop
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
	...

080030d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030d6:	4b0e      	ldr	r3, [pc, #56]	; (8003110 <prvResetNextTaskUnblockTime+0x40>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <prvResetNextTaskUnblockTime+0x14>
 80030e0:	2301      	movs	r3, #1
 80030e2:	e000      	b.n	80030e6 <prvResetNextTaskUnblockTime+0x16>
 80030e4:	2300      	movs	r3, #0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d004      	beq.n	80030f4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80030ea:	4b0a      	ldr	r3, [pc, #40]	; (8003114 <prvResetNextTaskUnblockTime+0x44>)
 80030ec:	f04f 32ff 	mov.w	r2, #4294967295
 80030f0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80030f2:	e008      	b.n	8003106 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80030f4:	4b06      	ldr	r3, [pc, #24]	; (8003110 <prvResetNextTaskUnblockTime+0x40>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	4a04      	ldr	r2, [pc, #16]	; (8003114 <prvResetNextTaskUnblockTime+0x44>)
 8003104:	6013      	str	r3, [r2, #0]
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr
 8003110:	20000c04 	.word	0x20000c04
 8003114:	20000c6c 	.word	0x20000c6c

08003118 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800311e:	4b0b      	ldr	r3, [pc, #44]	; (800314c <xTaskGetSchedulerState+0x34>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d102      	bne.n	800312c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003126:	2301      	movs	r3, #1
 8003128:	607b      	str	r3, [r7, #4]
 800312a:	e008      	b.n	800313e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800312c:	4b08      	ldr	r3, [pc, #32]	; (8003150 <xTaskGetSchedulerState+0x38>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d102      	bne.n	800313a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003134:	2302      	movs	r3, #2
 8003136:	607b      	str	r3, [r7, #4]
 8003138:	e001      	b.n	800313e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800313a:	2300      	movs	r3, #0
 800313c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800313e:	687b      	ldr	r3, [r7, #4]
	}
 8003140:	4618      	mov	r0, r3
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	20000c58 	.word	0x20000c58
 8003150:	20000c74 	.word	0x20000c74

08003154 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003160:	2300      	movs	r3, #0
 8003162:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d056      	beq.n	8003218 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800316a:	4b2e      	ldr	r3, [pc, #184]	; (8003224 <xTaskPriorityDisinherit+0xd0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	429a      	cmp	r2, r3
 8003172:	d00a      	beq.n	800318a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003178:	f383 8811 	msr	BASEPRI, r3
 800317c:	f3bf 8f6f 	isb	sy
 8003180:	f3bf 8f4f 	dsb	sy
 8003184:	60fb      	str	r3, [r7, #12]
}
 8003186:	bf00      	nop
 8003188:	e7fe      	b.n	8003188 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10a      	bne.n	80031a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003196:	f383 8811 	msr	BASEPRI, r3
 800319a:	f3bf 8f6f 	isb	sy
 800319e:	f3bf 8f4f 	dsb	sy
 80031a2:	60bb      	str	r3, [r7, #8]
}
 80031a4:	bf00      	nop
 80031a6:	e7fe      	b.n	80031a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ac:	1e5a      	subs	r2, r3, #1
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d02c      	beq.n	8003218 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d128      	bne.n	8003218 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	3304      	adds	r3, #4
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fe fc7e 	bl	8001acc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e8:	4b0f      	ldr	r3, [pc, #60]	; (8003228 <xTaskPriorityDisinherit+0xd4>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d903      	bls.n	80031f8 <xTaskPriorityDisinherit+0xa4>
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f4:	4a0c      	ldr	r2, [pc, #48]	; (8003228 <xTaskPriorityDisinherit+0xd4>)
 80031f6:	6013      	str	r3, [r2, #0]
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031fc:	4613      	mov	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4a09      	ldr	r2, [pc, #36]	; (800322c <xTaskPriorityDisinherit+0xd8>)
 8003206:	441a      	add	r2, r3
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	3304      	adds	r3, #4
 800320c:	4619      	mov	r1, r3
 800320e:	4610      	mov	r0, r2
 8003210:	f7fe fc01 	bl	8001a16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003214:	2301      	movs	r3, #1
 8003216:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003218:	697b      	ldr	r3, [r7, #20]
	}
 800321a:	4618      	mov	r0, r3
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20000778 	.word	0x20000778
 8003228:	20000c54 	.word	0x20000c54
 800322c:	2000077c 	.word	0x2000077c

08003230 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800323a:	4b21      	ldr	r3, [pc, #132]	; (80032c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003240:	4b20      	ldr	r3, [pc, #128]	; (80032c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	3304      	adds	r3, #4
 8003246:	4618      	mov	r0, r3
 8003248:	f7fe fc40 	bl	8001acc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003252:	d10a      	bne.n	800326a <prvAddCurrentTaskToDelayedList+0x3a>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d007      	beq.n	800326a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800325a:	4b1a      	ldr	r3, [pc, #104]	; (80032c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	3304      	adds	r3, #4
 8003260:	4619      	mov	r1, r3
 8003262:	4819      	ldr	r0, [pc, #100]	; (80032c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8003264:	f7fe fbd7 	bl	8001a16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003268:	e026      	b.n	80032b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4413      	add	r3, r2
 8003270:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003272:	4b14      	ldr	r3, [pc, #80]	; (80032c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	429a      	cmp	r2, r3
 8003280:	d209      	bcs.n	8003296 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003282:	4b12      	ldr	r3, [pc, #72]	; (80032cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	4b0f      	ldr	r3, [pc, #60]	; (80032c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	3304      	adds	r3, #4
 800328c:	4619      	mov	r1, r3
 800328e:	4610      	mov	r0, r2
 8003290:	f7fe fbe4 	bl	8001a5c <vListInsert>
}
 8003294:	e010      	b.n	80032b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003296:	4b0e      	ldr	r3, [pc, #56]	; (80032d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	4b0a      	ldr	r3, [pc, #40]	; (80032c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	3304      	adds	r3, #4
 80032a0:	4619      	mov	r1, r3
 80032a2:	4610      	mov	r0, r2
 80032a4:	f7fe fbda 	bl	8001a5c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80032a8:	4b0a      	ldr	r3, [pc, #40]	; (80032d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d202      	bcs.n	80032b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80032b2:	4a08      	ldr	r2, [pc, #32]	; (80032d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	6013      	str	r3, [r2, #0]
}
 80032b8:	bf00      	nop
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	20000c50 	.word	0x20000c50
 80032c4:	20000778 	.word	0x20000778
 80032c8:	20000c38 	.word	0x20000c38
 80032cc:	20000c08 	.word	0x20000c08
 80032d0:	20000c04 	.word	0x20000c04
 80032d4:	20000c6c 	.word	0x20000c6c

080032d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08a      	sub	sp, #40	; 0x28
 80032dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80032de:	2300      	movs	r3, #0
 80032e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80032e2:	f000 facb 	bl	800387c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80032e6:	4b1c      	ldr	r3, [pc, #112]	; (8003358 <xTimerCreateTimerTask+0x80>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d021      	beq.n	8003332 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80032ee:	2300      	movs	r3, #0
 80032f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80032f2:	2300      	movs	r3, #0
 80032f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80032f6:	1d3a      	adds	r2, r7, #4
 80032f8:	f107 0108 	add.w	r1, r7, #8
 80032fc:	f107 030c 	add.w	r3, r7, #12
 8003300:	4618      	mov	r0, r3
 8003302:	f7fe fb43 	bl	800198c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	9202      	str	r2, [sp, #8]
 800330e:	9301      	str	r3, [sp, #4]
 8003310:	2302      	movs	r3, #2
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	2300      	movs	r3, #0
 8003316:	460a      	mov	r2, r1
 8003318:	4910      	ldr	r1, [pc, #64]	; (800335c <xTimerCreateTimerTask+0x84>)
 800331a:	4811      	ldr	r0, [pc, #68]	; (8003360 <xTimerCreateTimerTask+0x88>)
 800331c:	f7ff f8e4 	bl	80024e8 <xTaskCreateStatic>
 8003320:	4603      	mov	r3, r0
 8003322:	4a10      	ldr	r2, [pc, #64]	; (8003364 <xTimerCreateTimerTask+0x8c>)
 8003324:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003326:	4b0f      	ldr	r3, [pc, #60]	; (8003364 <xTimerCreateTimerTask+0x8c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800332e:	2301      	movs	r3, #1
 8003330:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10a      	bne.n	800334e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	613b      	str	r3, [r7, #16]
}
 800334a:	bf00      	nop
 800334c:	e7fe      	b.n	800334c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800334e:	697b      	ldr	r3, [r7, #20]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	20000ca8 	.word	0x20000ca8
 800335c:	08004138 	.word	0x08004138
 8003360:	08003485 	.word	0x08003485
 8003364:	20000cac 	.word	0x20000cac

08003368 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b08a      	sub	sp, #40	; 0x28
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
 8003374:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003376:	2300      	movs	r3, #0
 8003378:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10a      	bne.n	8003396 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003384:	f383 8811 	msr	BASEPRI, r3
 8003388:	f3bf 8f6f 	isb	sy
 800338c:	f3bf 8f4f 	dsb	sy
 8003390:	623b      	str	r3, [r7, #32]
}
 8003392:	bf00      	nop
 8003394:	e7fe      	b.n	8003394 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003396:	4b1a      	ldr	r3, [pc, #104]	; (8003400 <xTimerGenericCommand+0x98>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d02a      	beq.n	80033f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2b05      	cmp	r3, #5
 80033ae:	dc18      	bgt.n	80033e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80033b0:	f7ff feb2 	bl	8003118 <xTaskGetSchedulerState>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d109      	bne.n	80033ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80033ba:	4b11      	ldr	r3, [pc, #68]	; (8003400 <xTimerGenericCommand+0x98>)
 80033bc:	6818      	ldr	r0, [r3, #0]
 80033be:	f107 0110 	add.w	r1, r7, #16
 80033c2:	2300      	movs	r3, #0
 80033c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033c6:	f7fe fcad 	bl	8001d24 <xQueueGenericSend>
 80033ca:	6278      	str	r0, [r7, #36]	; 0x24
 80033cc:	e012      	b.n	80033f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80033ce:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <xTimerGenericCommand+0x98>)
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	f107 0110 	add.w	r1, r7, #16
 80033d6:	2300      	movs	r3, #0
 80033d8:	2200      	movs	r2, #0
 80033da:	f7fe fca3 	bl	8001d24 <xQueueGenericSend>
 80033de:	6278      	str	r0, [r7, #36]	; 0x24
 80033e0:	e008      	b.n	80033f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80033e2:	4b07      	ldr	r3, [pc, #28]	; (8003400 <xTimerGenericCommand+0x98>)
 80033e4:	6818      	ldr	r0, [r3, #0]
 80033e6:	f107 0110 	add.w	r1, r7, #16
 80033ea:	2300      	movs	r3, #0
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	f7fe fd97 	bl	8001f20 <xQueueGenericSendFromISR>
 80033f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3728      	adds	r7, #40	; 0x28
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	20000ca8 	.word	0x20000ca8

08003404 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b088      	sub	sp, #32
 8003408:	af02      	add	r7, sp, #8
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800340e:	4b1c      	ldr	r3, [pc, #112]	; (8003480 <prvProcessExpiredTimer+0x7c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	3304      	adds	r3, #4
 800341c:	4618      	mov	r0, r3
 800341e:	f7fe fb55 	bl	8001acc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d122      	bne.n	8003470 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	699a      	ldr	r2, [r3, #24]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	18d1      	adds	r1, r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	6978      	ldr	r0, [r7, #20]
 8003438:	f000 f8c8 	bl	80035cc <prvInsertTimerInActiveList>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d016      	beq.n	8003470 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003442:	2300      	movs	r3, #0
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	2300      	movs	r3, #0
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	2100      	movs	r1, #0
 800344c:	6978      	ldr	r0, [r7, #20]
 800344e:	f7ff ff8b 	bl	8003368 <xTimerGenericCommand>
 8003452:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10a      	bne.n	8003470 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800345a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345e:	f383 8811 	msr	BASEPRI, r3
 8003462:	f3bf 8f6f 	isb	sy
 8003466:	f3bf 8f4f 	dsb	sy
 800346a:	60fb      	str	r3, [r7, #12]
}
 800346c:	bf00      	nop
 800346e:	e7fe      	b.n	800346e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	6978      	ldr	r0, [r7, #20]
 8003476:	4798      	blx	r3
}
 8003478:	bf00      	nop
 800347a:	3718      	adds	r7, #24
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	20000ca0 	.word	0x20000ca0

08003484 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800348c:	f107 0308 	add.w	r3, r7, #8
 8003490:	4618      	mov	r0, r3
 8003492:	f000 f857 	bl	8003544 <prvGetNextExpireTime>
 8003496:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	4619      	mov	r1, r3
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 f803 	bl	80034a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80034a2:	f000 f8d5 	bl	8003650 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80034a6:	e7f1      	b.n	800348c <prvTimerTask+0x8>

080034a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80034b2:	f7ff fa4b 	bl	800294c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80034b6:	f107 0308 	add.w	r3, r7, #8
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 f866 	bl	800358c <prvSampleTimeNow>
 80034c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d130      	bne.n	800352a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10a      	bne.n	80034e4 <prvProcessTimerOrBlockTask+0x3c>
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d806      	bhi.n	80034e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80034d6:	f7ff fa47 	bl	8002968 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80034da:	68f9      	ldr	r1, [r7, #12]
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7ff ff91 	bl	8003404 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80034e2:	e024      	b.n	800352e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d008      	beq.n	80034fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80034ea:	4b13      	ldr	r3, [pc, #76]	; (8003538 <prvProcessTimerOrBlockTask+0x90>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	bf0c      	ite	eq
 80034f4:	2301      	moveq	r3, #1
 80034f6:	2300      	movne	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80034fc:	4b0f      	ldr	r3, [pc, #60]	; (800353c <prvProcessTimerOrBlockTask+0x94>)
 80034fe:	6818      	ldr	r0, [r3, #0]
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	4619      	mov	r1, r3
 800350a:	f7fe ffb9 	bl	8002480 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800350e:	f7ff fa2b 	bl	8002968 <xTaskResumeAll>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10a      	bne.n	800352e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003518:	4b09      	ldr	r3, [pc, #36]	; (8003540 <prvProcessTimerOrBlockTask+0x98>)
 800351a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	f3bf 8f4f 	dsb	sy
 8003524:	f3bf 8f6f 	isb	sy
}
 8003528:	e001      	b.n	800352e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800352a:	f7ff fa1d 	bl	8002968 <xTaskResumeAll>
}
 800352e:	bf00      	nop
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	20000ca4 	.word	0x20000ca4
 800353c:	20000ca8 	.word	0x20000ca8
 8003540:	e000ed04 	.word	0xe000ed04

08003544 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800354c:	4b0e      	ldr	r3, [pc, #56]	; (8003588 <prvGetNextExpireTime+0x44>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	bf0c      	ite	eq
 8003556:	2301      	moveq	r3, #1
 8003558:	2300      	movne	r3, #0
 800355a:	b2db      	uxtb	r3, r3
 800355c:	461a      	mov	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d105      	bne.n	8003576 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800356a:	4b07      	ldr	r3, [pc, #28]	; (8003588 <prvGetNextExpireTime+0x44>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	e001      	b.n	800357a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800357a:	68fb      	ldr	r3, [r7, #12]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	bc80      	pop	{r7}
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	20000ca0 	.word	0x20000ca0

0800358c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003594:	f7ff fa86 	bl	8002aa4 <xTaskGetTickCount>
 8003598:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800359a:	4b0b      	ldr	r3, [pc, #44]	; (80035c8 <prvSampleTimeNow+0x3c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d205      	bcs.n	80035b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80035a4:	f000 f908 	bl	80037b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	e002      	b.n	80035b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80035b6:	4a04      	ldr	r2, [pc, #16]	; (80035c8 <prvSampleTimeNow+0x3c>)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80035bc:	68fb      	ldr	r3, [r7, #12]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	20000cb0 	.word	0x20000cb0

080035cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
 80035d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80035da:	2300      	movs	r3, #0
 80035dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d812      	bhi.n	8003618 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	1ad2      	subs	r2, r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d302      	bcc.n	8003606 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003600:	2301      	movs	r3, #1
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	e01b      	b.n	800363e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003606:	4b10      	ldr	r3, [pc, #64]	; (8003648 <prvInsertTimerInActiveList+0x7c>)
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	3304      	adds	r3, #4
 800360e:	4619      	mov	r1, r3
 8003610:	4610      	mov	r0, r2
 8003612:	f7fe fa23 	bl	8001a5c <vListInsert>
 8003616:	e012      	b.n	800363e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d206      	bcs.n	800362e <prvInsertTimerInActiveList+0x62>
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	429a      	cmp	r2, r3
 8003626:	d302      	bcc.n	800362e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003628:	2301      	movs	r3, #1
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	e007      	b.n	800363e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800362e:	4b07      	ldr	r3, [pc, #28]	; (800364c <prvInsertTimerInActiveList+0x80>)
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	3304      	adds	r3, #4
 8003636:	4619      	mov	r1, r3
 8003638:	4610      	mov	r0, r2
 800363a:	f7fe fa0f 	bl	8001a5c <vListInsert>
		}
	}

	return xProcessTimerNow;
 800363e:	697b      	ldr	r3, [r7, #20]
}
 8003640:	4618      	mov	r0, r3
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	20000ca4 	.word	0x20000ca4
 800364c:	20000ca0 	.word	0x20000ca0

08003650 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b08e      	sub	sp, #56	; 0x38
 8003654:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003656:	e09d      	b.n	8003794 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	da18      	bge.n	8003690 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800365e:	1d3b      	adds	r3, r7, #4
 8003660:	3304      	adds	r3, #4
 8003662:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10a      	bne.n	8003680 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800366a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366e:	f383 8811 	msr	BASEPRI, r3
 8003672:	f3bf 8f6f 	isb	sy
 8003676:	f3bf 8f4f 	dsb	sy
 800367a:	61fb      	str	r3, [r7, #28]
}
 800367c:	bf00      	nop
 800367e:	e7fe      	b.n	800367e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003686:	6850      	ldr	r0, [r2, #4]
 8003688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800368a:	6892      	ldr	r2, [r2, #8]
 800368c:	4611      	mov	r1, r2
 800368e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	db7d      	blt.n	8003792 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800369a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d004      	beq.n	80036ac <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80036a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a4:	3304      	adds	r3, #4
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7fe fa10 	bl	8001acc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80036ac:	463b      	mov	r3, r7
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff ff6c 	bl	800358c <prvSampleTimeNow>
 80036b4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b09      	cmp	r3, #9
 80036ba:	d86b      	bhi.n	8003794 <prvProcessReceivedCommands+0x144>
 80036bc:	a201      	add	r2, pc, #4	; (adr r2, 80036c4 <prvProcessReceivedCommands+0x74>)
 80036be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c2:	bf00      	nop
 80036c4:	080036ed 	.word	0x080036ed
 80036c8:	080036ed 	.word	0x080036ed
 80036cc:	080036ed 	.word	0x080036ed
 80036d0:	08003795 	.word	0x08003795
 80036d4:	08003749 	.word	0x08003749
 80036d8:	08003781 	.word	0x08003781
 80036dc:	080036ed 	.word	0x080036ed
 80036e0:	080036ed 	.word	0x080036ed
 80036e4:	08003795 	.word	0x08003795
 80036e8:	08003749 	.word	0x08003749
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	18d1      	adds	r1, r2, r3
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036fa:	f7ff ff67 	bl	80035cc <prvInsertTimerInActiveList>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d047      	beq.n	8003794 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800370a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800370c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d13f      	bne.n	8003794 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	441a      	add	r2, r3
 800371c:	2300      	movs	r3, #0
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	2300      	movs	r3, #0
 8003722:	2100      	movs	r1, #0
 8003724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003726:	f7ff fe1f 	bl	8003368 <xTimerGenericCommand>
 800372a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d130      	bne.n	8003794 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8003732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003736:	f383 8811 	msr	BASEPRI, r3
 800373a:	f3bf 8f6f 	isb	sy
 800373e:	f3bf 8f4f 	dsb	sy
 8003742:	61bb      	str	r3, [r7, #24]
}
 8003744:	bf00      	nop
 8003746:	e7fe      	b.n	8003746 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800374e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10a      	bne.n	800376c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8003756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375a:	f383 8811 	msr	BASEPRI, r3
 800375e:	f3bf 8f6f 	isb	sy
 8003762:	f3bf 8f4f 	dsb	sy
 8003766:	617b      	str	r3, [r7, #20]
}
 8003768:	bf00      	nop
 800376a:	e7fe      	b.n	800376a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800376c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376e:	699a      	ldr	r2, [r3, #24]
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	18d1      	adds	r1, r2, r3
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003778:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800377a:	f7ff ff27 	bl	80035cc <prvInsertTimerInActiveList>
					break;
 800377e:	e009      	b.n	8003794 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003782:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003786:	2b00      	cmp	r3, #0
 8003788:	d104      	bne.n	8003794 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800378a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800378c:	f000 fb6a 	bl	8003e64 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003790:	e000      	b.n	8003794 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003792:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003794:	4b07      	ldr	r3, [pc, #28]	; (80037b4 <prvProcessReceivedCommands+0x164>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	1d39      	adds	r1, r7, #4
 800379a:	2200      	movs	r2, #0
 800379c:	4618      	mov	r0, r3
 800379e:	f7fe fc57 	bl	8002050 <xQueueReceive>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f47f af57 	bne.w	8003658 <prvProcessReceivedCommands+0x8>
	}
}
 80037aa:	bf00      	nop
 80037ac:	bf00      	nop
 80037ae:	3730      	adds	r7, #48	; 0x30
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	20000ca8 	.word	0x20000ca8

080037b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b088      	sub	sp, #32
 80037bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80037be:	e045      	b.n	800384c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80037c0:	4b2c      	ldr	r3, [pc, #176]	; (8003874 <prvSwitchTimerLists+0xbc>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80037ca:	4b2a      	ldr	r3, [pc, #168]	; (8003874 <prvSwitchTimerLists+0xbc>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	3304      	adds	r3, #4
 80037d8:	4618      	mov	r0, r3
 80037da:	f7fe f977 	bl	8001acc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d12e      	bne.n	800384c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	4413      	add	r3, r2
 80037f6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d90e      	bls.n	800381e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800380c:	4b19      	ldr	r3, [pc, #100]	; (8003874 <prvSwitchTimerLists+0xbc>)
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	3304      	adds	r3, #4
 8003814:	4619      	mov	r1, r3
 8003816:	4610      	mov	r0, r2
 8003818:	f7fe f920 	bl	8001a5c <vListInsert>
 800381c:	e016      	b.n	800384c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800381e:	2300      	movs	r3, #0
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	2300      	movs	r3, #0
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	2100      	movs	r1, #0
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f7ff fd9d 	bl	8003368 <xTimerGenericCommand>
 800382e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10a      	bne.n	800384c <prvSwitchTimerLists+0x94>
	__asm volatile
 8003836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383a:	f383 8811 	msr	BASEPRI, r3
 800383e:	f3bf 8f6f 	isb	sy
 8003842:	f3bf 8f4f 	dsb	sy
 8003846:	603b      	str	r3, [r7, #0]
}
 8003848:	bf00      	nop
 800384a:	e7fe      	b.n	800384a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800384c:	4b09      	ldr	r3, [pc, #36]	; (8003874 <prvSwitchTimerLists+0xbc>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1b4      	bne.n	80037c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003856:	4b07      	ldr	r3, [pc, #28]	; (8003874 <prvSwitchTimerLists+0xbc>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800385c:	4b06      	ldr	r3, [pc, #24]	; (8003878 <prvSwitchTimerLists+0xc0>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a04      	ldr	r2, [pc, #16]	; (8003874 <prvSwitchTimerLists+0xbc>)
 8003862:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003864:	4a04      	ldr	r2, [pc, #16]	; (8003878 <prvSwitchTimerLists+0xc0>)
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	6013      	str	r3, [r2, #0]
}
 800386a:	bf00      	nop
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	20000ca0 	.word	0x20000ca0
 8003878:	20000ca4 	.word	0x20000ca4

0800387c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003882:	f000 f92b 	bl	8003adc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003886:	4b15      	ldr	r3, [pc, #84]	; (80038dc <prvCheckForValidListAndQueue+0x60>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d120      	bne.n	80038d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800388e:	4814      	ldr	r0, [pc, #80]	; (80038e0 <prvCheckForValidListAndQueue+0x64>)
 8003890:	f7fe f896 	bl	80019c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003894:	4813      	ldr	r0, [pc, #76]	; (80038e4 <prvCheckForValidListAndQueue+0x68>)
 8003896:	f7fe f893 	bl	80019c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800389a:	4b13      	ldr	r3, [pc, #76]	; (80038e8 <prvCheckForValidListAndQueue+0x6c>)
 800389c:	4a10      	ldr	r2, [pc, #64]	; (80038e0 <prvCheckForValidListAndQueue+0x64>)
 800389e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80038a0:	4b12      	ldr	r3, [pc, #72]	; (80038ec <prvCheckForValidListAndQueue+0x70>)
 80038a2:	4a10      	ldr	r2, [pc, #64]	; (80038e4 <prvCheckForValidListAndQueue+0x68>)
 80038a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80038a6:	2300      	movs	r3, #0
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	4b11      	ldr	r3, [pc, #68]	; (80038f0 <prvCheckForValidListAndQueue+0x74>)
 80038ac:	4a11      	ldr	r2, [pc, #68]	; (80038f4 <prvCheckForValidListAndQueue+0x78>)
 80038ae:	2110      	movs	r1, #16
 80038b0:	200a      	movs	r0, #10
 80038b2:	f7fe f99d 	bl	8001bf0 <xQueueGenericCreateStatic>
 80038b6:	4603      	mov	r3, r0
 80038b8:	4a08      	ldr	r2, [pc, #32]	; (80038dc <prvCheckForValidListAndQueue+0x60>)
 80038ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80038bc:	4b07      	ldr	r3, [pc, #28]	; (80038dc <prvCheckForValidListAndQueue+0x60>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80038c4:	4b05      	ldr	r3, [pc, #20]	; (80038dc <prvCheckForValidListAndQueue+0x60>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	490b      	ldr	r1, [pc, #44]	; (80038f8 <prvCheckForValidListAndQueue+0x7c>)
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fe fdb0 	bl	8002430 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80038d0:	f000 f934 	bl	8003b3c <vPortExitCritical>
}
 80038d4:	bf00      	nop
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	20000ca8 	.word	0x20000ca8
 80038e0:	20000c78 	.word	0x20000c78
 80038e4:	20000c8c 	.word	0x20000c8c
 80038e8:	20000ca0 	.word	0x20000ca0
 80038ec:	20000ca4 	.word	0x20000ca4
 80038f0:	20000d54 	.word	0x20000d54
 80038f4:	20000cb4 	.word	0x20000cb4
 80038f8:	08004140 	.word	0x08004140

080038fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	3b04      	subs	r3, #4
 800390c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003914:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	3b04      	subs	r3, #4
 800391a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f023 0201 	bic.w	r2, r3, #1
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	3b04      	subs	r3, #4
 800392a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800392c:	4a08      	ldr	r2, [pc, #32]	; (8003950 <pxPortInitialiseStack+0x54>)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	3b14      	subs	r3, #20
 8003936:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	3b20      	subs	r3, #32
 8003942:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003944:	68fb      	ldr	r3, [r7, #12]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	bc80      	pop	{r7}
 800394e:	4770      	bx	lr
 8003950:	08003955 	.word	0x08003955

08003954 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800395a:	2300      	movs	r3, #0
 800395c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800395e:	4b12      	ldr	r3, [pc, #72]	; (80039a8 <prvTaskExitError+0x54>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003966:	d00a      	beq.n	800397e <prvTaskExitError+0x2a>
	__asm volatile
 8003968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396c:	f383 8811 	msr	BASEPRI, r3
 8003970:	f3bf 8f6f 	isb	sy
 8003974:	f3bf 8f4f 	dsb	sy
 8003978:	60fb      	str	r3, [r7, #12]
}
 800397a:	bf00      	nop
 800397c:	e7fe      	b.n	800397c <prvTaskExitError+0x28>
	__asm volatile
 800397e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003982:	f383 8811 	msr	BASEPRI, r3
 8003986:	f3bf 8f6f 	isb	sy
 800398a:	f3bf 8f4f 	dsb	sy
 800398e:	60bb      	str	r3, [r7, #8]
}
 8003990:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003992:	bf00      	nop
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d0fc      	beq.n	8003994 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800399a:	bf00      	nop
 800399c:	bf00      	nop
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	2000000c 	.word	0x2000000c
 80039ac:	00000000 	.word	0x00000000

080039b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80039b0:	4b07      	ldr	r3, [pc, #28]	; (80039d0 <pxCurrentTCBConst2>)
 80039b2:	6819      	ldr	r1, [r3, #0]
 80039b4:	6808      	ldr	r0, [r1, #0]
 80039b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80039ba:	f380 8809 	msr	PSP, r0
 80039be:	f3bf 8f6f 	isb	sy
 80039c2:	f04f 0000 	mov.w	r0, #0
 80039c6:	f380 8811 	msr	BASEPRI, r0
 80039ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80039ce:	4770      	bx	lr

080039d0 <pxCurrentTCBConst2>:
 80039d0:	20000778 	.word	0x20000778
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80039d4:	bf00      	nop
 80039d6:	bf00      	nop

080039d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80039d8:	4806      	ldr	r0, [pc, #24]	; (80039f4 <prvPortStartFirstTask+0x1c>)
 80039da:	6800      	ldr	r0, [r0, #0]
 80039dc:	6800      	ldr	r0, [r0, #0]
 80039de:	f380 8808 	msr	MSP, r0
 80039e2:	b662      	cpsie	i
 80039e4:	b661      	cpsie	f
 80039e6:	f3bf 8f4f 	dsb	sy
 80039ea:	f3bf 8f6f 	isb	sy
 80039ee:	df00      	svc	0
 80039f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80039f2:	bf00      	nop
 80039f4:	e000ed08 	.word	0xe000ed08

080039f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80039fe:	4b32      	ldr	r3, [pc, #200]	; (8003ac8 <xPortStartScheduler+0xd0>)
 8003a00:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	22ff      	movs	r2, #255	; 0xff
 8003a0e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003a18:	78fb      	ldrb	r3, [r7, #3]
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	4b2a      	ldr	r3, [pc, #168]	; (8003acc <xPortStartScheduler+0xd4>)
 8003a24:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003a26:	4b2a      	ldr	r3, [pc, #168]	; (8003ad0 <xPortStartScheduler+0xd8>)
 8003a28:	2207      	movs	r2, #7
 8003a2a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a2c:	e009      	b.n	8003a42 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003a2e:	4b28      	ldr	r3, [pc, #160]	; (8003ad0 <xPortStartScheduler+0xd8>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	4a26      	ldr	r2, [pc, #152]	; (8003ad0 <xPortStartScheduler+0xd8>)
 8003a36:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003a38:	78fb      	ldrb	r3, [r7, #3]
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a42:	78fb      	ldrb	r3, [r7, #3]
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4a:	2b80      	cmp	r3, #128	; 0x80
 8003a4c:	d0ef      	beq.n	8003a2e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003a4e:	4b20      	ldr	r3, [pc, #128]	; (8003ad0 <xPortStartScheduler+0xd8>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f1c3 0307 	rsb	r3, r3, #7
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d00a      	beq.n	8003a70 <xPortStartScheduler+0x78>
	__asm volatile
 8003a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5e:	f383 8811 	msr	BASEPRI, r3
 8003a62:	f3bf 8f6f 	isb	sy
 8003a66:	f3bf 8f4f 	dsb	sy
 8003a6a:	60bb      	str	r3, [r7, #8]
}
 8003a6c:	bf00      	nop
 8003a6e:	e7fe      	b.n	8003a6e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003a70:	4b17      	ldr	r3, [pc, #92]	; (8003ad0 <xPortStartScheduler+0xd8>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	021b      	lsls	r3, r3, #8
 8003a76:	4a16      	ldr	r2, [pc, #88]	; (8003ad0 <xPortStartScheduler+0xd8>)
 8003a78:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a7a:	4b15      	ldr	r3, [pc, #84]	; (8003ad0 <xPortStartScheduler+0xd8>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a82:	4a13      	ldr	r2, [pc, #76]	; (8003ad0 <xPortStartScheduler+0xd8>)
 8003a84:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003a8e:	4b11      	ldr	r3, [pc, #68]	; (8003ad4 <xPortStartScheduler+0xdc>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a10      	ldr	r2, [pc, #64]	; (8003ad4 <xPortStartScheduler+0xdc>)
 8003a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003a9a:	4b0e      	ldr	r3, [pc, #56]	; (8003ad4 <xPortStartScheduler+0xdc>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a0d      	ldr	r2, [pc, #52]	; (8003ad4 <xPortStartScheduler+0xdc>)
 8003aa0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003aa4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003aa6:	f000 f8b9 	bl	8003c1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003aaa:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <xPortStartScheduler+0xe0>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003ab0:	f7ff ff92 	bl	80039d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003ab4:	f7ff f8c2 	bl	8002c3c <vTaskSwitchContext>
	prvTaskExitError();
 8003ab8:	f7ff ff4c 	bl	8003954 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	e000e400 	.word	0xe000e400
 8003acc:	20000da4 	.word	0x20000da4
 8003ad0:	20000da8 	.word	0x20000da8
 8003ad4:	e000ed20 	.word	0xe000ed20
 8003ad8:	2000000c 	.word	0x2000000c

08003adc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
	__asm volatile
 8003ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae6:	f383 8811 	msr	BASEPRI, r3
 8003aea:	f3bf 8f6f 	isb	sy
 8003aee:	f3bf 8f4f 	dsb	sy
 8003af2:	607b      	str	r3, [r7, #4]
}
 8003af4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003af6:	4b0f      	ldr	r3, [pc, #60]	; (8003b34 <vPortEnterCritical+0x58>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	3301      	adds	r3, #1
 8003afc:	4a0d      	ldr	r2, [pc, #52]	; (8003b34 <vPortEnterCritical+0x58>)
 8003afe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003b00:	4b0c      	ldr	r3, [pc, #48]	; (8003b34 <vPortEnterCritical+0x58>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d10f      	bne.n	8003b28 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003b08:	4b0b      	ldr	r3, [pc, #44]	; (8003b38 <vPortEnterCritical+0x5c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00a      	beq.n	8003b28 <vPortEnterCritical+0x4c>
	__asm volatile
 8003b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b16:	f383 8811 	msr	BASEPRI, r3
 8003b1a:	f3bf 8f6f 	isb	sy
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	603b      	str	r3, [r7, #0]
}
 8003b24:	bf00      	nop
 8003b26:	e7fe      	b.n	8003b26 <vPortEnterCritical+0x4a>
	}
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bc80      	pop	{r7}
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	2000000c 	.word	0x2000000c
 8003b38:	e000ed04 	.word	0xe000ed04

08003b3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003b42:	4b11      	ldr	r3, [pc, #68]	; (8003b88 <vPortExitCritical+0x4c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10a      	bne.n	8003b60 <vPortExitCritical+0x24>
	__asm volatile
 8003b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4e:	f383 8811 	msr	BASEPRI, r3
 8003b52:	f3bf 8f6f 	isb	sy
 8003b56:	f3bf 8f4f 	dsb	sy
 8003b5a:	607b      	str	r3, [r7, #4]
}
 8003b5c:	bf00      	nop
 8003b5e:	e7fe      	b.n	8003b5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003b60:	4b09      	ldr	r3, [pc, #36]	; (8003b88 <vPortExitCritical+0x4c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3b01      	subs	r3, #1
 8003b66:	4a08      	ldr	r2, [pc, #32]	; (8003b88 <vPortExitCritical+0x4c>)
 8003b68:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003b6a:	4b07      	ldr	r3, [pc, #28]	; (8003b88 <vPortExitCritical+0x4c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d105      	bne.n	8003b7e <vPortExitCritical+0x42>
 8003b72:	2300      	movs	r3, #0
 8003b74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	f383 8811 	msr	BASEPRI, r3
}
 8003b7c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr
 8003b88:	2000000c 	.word	0x2000000c
 8003b8c:	00000000 	.word	0x00000000

08003b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003b90:	f3ef 8009 	mrs	r0, PSP
 8003b94:	f3bf 8f6f 	isb	sy
 8003b98:	4b0d      	ldr	r3, [pc, #52]	; (8003bd0 <pxCurrentTCBConst>)
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003ba0:	6010      	str	r0, [r2, #0]
 8003ba2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003ba6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003baa:	f380 8811 	msr	BASEPRI, r0
 8003bae:	f7ff f845 	bl	8002c3c <vTaskSwitchContext>
 8003bb2:	f04f 0000 	mov.w	r0, #0
 8003bb6:	f380 8811 	msr	BASEPRI, r0
 8003bba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003bbe:	6819      	ldr	r1, [r3, #0]
 8003bc0:	6808      	ldr	r0, [r1, #0]
 8003bc2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003bc6:	f380 8809 	msr	PSP, r0
 8003bca:	f3bf 8f6f 	isb	sy
 8003bce:	4770      	bx	lr

08003bd0 <pxCurrentTCBConst>:
 8003bd0:	20000778 	.word	0x20000778
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003bd4:	bf00      	nop
 8003bd6:	bf00      	nop

08003bd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
	__asm volatile
 8003bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be2:	f383 8811 	msr	BASEPRI, r3
 8003be6:	f3bf 8f6f 	isb	sy
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	607b      	str	r3, [r7, #4]
}
 8003bf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003bf2:	f7fe ff65 	bl	8002ac0 <xTaskIncrementTick>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003bfc:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <SysTick_Handler+0x40>)
 8003bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	2300      	movs	r3, #0
 8003c06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	f383 8811 	msr	BASEPRI, r3
}
 8003c0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003c10:	bf00      	nop
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	e000ed04 	.word	0xe000ed04

08003c1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003c20:	4b0a      	ldr	r3, [pc, #40]	; (8003c4c <vPortSetupTimerInterrupt+0x30>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003c26:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <vPortSetupTimerInterrupt+0x34>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003c2c:	4b09      	ldr	r3, [pc, #36]	; (8003c54 <vPortSetupTimerInterrupt+0x38>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a09      	ldr	r2, [pc, #36]	; (8003c58 <vPortSetupTimerInterrupt+0x3c>)
 8003c32:	fba2 2303 	umull	r2, r3, r2, r3
 8003c36:	099b      	lsrs	r3, r3, #6
 8003c38:	4a08      	ldr	r2, [pc, #32]	; (8003c5c <vPortSetupTimerInterrupt+0x40>)
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003c3e:	4b03      	ldr	r3, [pc, #12]	; (8003c4c <vPortSetupTimerInterrupt+0x30>)
 8003c40:	2207      	movs	r2, #7
 8003c42:	601a      	str	r2, [r3, #0]
}
 8003c44:	bf00      	nop
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bc80      	pop	{r7}
 8003c4a:	4770      	bx	lr
 8003c4c:	e000e010 	.word	0xe000e010
 8003c50:	e000e018 	.word	0xe000e018
 8003c54:	20000000 	.word	0x20000000
 8003c58:	10624dd3 	.word	0x10624dd3
 8003c5c:	e000e014 	.word	0xe000e014

08003c60 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003c66:	f3ef 8305 	mrs	r3, IPSR
 8003c6a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2b0f      	cmp	r3, #15
 8003c70:	d914      	bls.n	8003c9c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003c72:	4a16      	ldr	r2, [pc, #88]	; (8003ccc <vPortValidateInterruptPriority+0x6c>)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4413      	add	r3, r2
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003c7c:	4b14      	ldr	r3, [pc, #80]	; (8003cd0 <vPortValidateInterruptPriority+0x70>)
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	7afa      	ldrb	r2, [r7, #11]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d20a      	bcs.n	8003c9c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8a:	f383 8811 	msr	BASEPRI, r3
 8003c8e:	f3bf 8f6f 	isb	sy
 8003c92:	f3bf 8f4f 	dsb	sy
 8003c96:	607b      	str	r3, [r7, #4]
}
 8003c98:	bf00      	nop
 8003c9a:	e7fe      	b.n	8003c9a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003c9c:	4b0d      	ldr	r3, [pc, #52]	; (8003cd4 <vPortValidateInterruptPriority+0x74>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ca4:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <vPortValidateInterruptPriority+0x78>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d90a      	bls.n	8003cc2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb0:	f383 8811 	msr	BASEPRI, r3
 8003cb4:	f3bf 8f6f 	isb	sy
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	603b      	str	r3, [r7, #0]
}
 8003cbe:	bf00      	nop
 8003cc0:	e7fe      	b.n	8003cc0 <vPortValidateInterruptPriority+0x60>
	}
 8003cc2:	bf00      	nop
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr
 8003ccc:	e000e3f0 	.word	0xe000e3f0
 8003cd0:	20000da4 	.word	0x20000da4
 8003cd4:	e000ed0c 	.word	0xe000ed0c
 8003cd8:	20000da8 	.word	0x20000da8

08003cdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b08a      	sub	sp, #40	; 0x28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003ce8:	f7fe fe30 	bl	800294c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003cec:	4b58      	ldr	r3, [pc, #352]	; (8003e50 <pvPortMalloc+0x174>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d101      	bne.n	8003cf8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003cf4:	f000 f910 	bl	8003f18 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003cf8:	4b56      	ldr	r3, [pc, #344]	; (8003e54 <pvPortMalloc+0x178>)
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f040 808e 	bne.w	8003e22 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d01d      	beq.n	8003d48 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003d0c:	2208      	movs	r2, #8
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4413      	add	r3, r2
 8003d12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f003 0307 	and.w	r3, r3, #7
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d014      	beq.n	8003d48 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f023 0307 	bic.w	r3, r3, #7
 8003d24:	3308      	adds	r3, #8
 8003d26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f003 0307 	and.w	r3, r3, #7
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00a      	beq.n	8003d48 <pvPortMalloc+0x6c>
	__asm volatile
 8003d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d36:	f383 8811 	msr	BASEPRI, r3
 8003d3a:	f3bf 8f6f 	isb	sy
 8003d3e:	f3bf 8f4f 	dsb	sy
 8003d42:	617b      	str	r3, [r7, #20]
}
 8003d44:	bf00      	nop
 8003d46:	e7fe      	b.n	8003d46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d069      	beq.n	8003e22 <pvPortMalloc+0x146>
 8003d4e:	4b42      	ldr	r3, [pc, #264]	; (8003e58 <pvPortMalloc+0x17c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d864      	bhi.n	8003e22 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003d58:	4b40      	ldr	r3, [pc, #256]	; (8003e5c <pvPortMalloc+0x180>)
 8003d5a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003d5c:	4b3f      	ldr	r3, [pc, #252]	; (8003e5c <pvPortMalloc+0x180>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d62:	e004      	b.n	8003d6e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d903      	bls.n	8003d80 <pvPortMalloc+0xa4>
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1f1      	bne.n	8003d64 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003d80:	4b33      	ldr	r3, [pc, #204]	; (8003e50 <pvPortMalloc+0x174>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d04b      	beq.n	8003e22 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2208      	movs	r2, #8
 8003d90:	4413      	add	r3, r2
 8003d92:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	6a3b      	ldr	r3, [r7, #32]
 8003d9a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	1ad2      	subs	r2, r2, r3
 8003da4:	2308      	movs	r3, #8
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d91f      	bls.n	8003dec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4413      	add	r3, r2
 8003db2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00a      	beq.n	8003dd4 <pvPortMalloc+0xf8>
	__asm volatile
 8003dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc2:	f383 8811 	msr	BASEPRI, r3
 8003dc6:	f3bf 8f6f 	isb	sy
 8003dca:	f3bf 8f4f 	dsb	sy
 8003dce:	613b      	str	r3, [r7, #16]
}
 8003dd0:	bf00      	nop
 8003dd2:	e7fe      	b.n	8003dd2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	1ad2      	subs	r2, r2, r3
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003de6:	69b8      	ldr	r0, [r7, #24]
 8003de8:	f000 f8f8 	bl	8003fdc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003dec:	4b1a      	ldr	r3, [pc, #104]	; (8003e58 <pvPortMalloc+0x17c>)
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	4a18      	ldr	r2, [pc, #96]	; (8003e58 <pvPortMalloc+0x17c>)
 8003df8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003dfa:	4b17      	ldr	r3, [pc, #92]	; (8003e58 <pvPortMalloc+0x17c>)
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	4b18      	ldr	r3, [pc, #96]	; (8003e60 <pvPortMalloc+0x184>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d203      	bcs.n	8003e0e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003e06:	4b14      	ldr	r3, [pc, #80]	; (8003e58 <pvPortMalloc+0x17c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a15      	ldr	r2, [pc, #84]	; (8003e60 <pvPortMalloc+0x184>)
 8003e0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	4b10      	ldr	r3, [pc, #64]	; (8003e54 <pvPortMalloc+0x178>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	2200      	movs	r2, #0
 8003e20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003e22:	f7fe fda1 	bl	8002968 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	f003 0307 	and.w	r3, r3, #7
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00a      	beq.n	8003e46 <pvPortMalloc+0x16a>
	__asm volatile
 8003e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e34:	f383 8811 	msr	BASEPRI, r3
 8003e38:	f3bf 8f6f 	isb	sy
 8003e3c:	f3bf 8f4f 	dsb	sy
 8003e40:	60fb      	str	r3, [r7, #12]
}
 8003e42:	bf00      	nop
 8003e44:	e7fe      	b.n	8003e44 <pvPortMalloc+0x168>
	return pvReturn;
 8003e46:	69fb      	ldr	r3, [r7, #28]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3728      	adds	r7, #40	; 0x28
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	200019b4 	.word	0x200019b4
 8003e54:	200019c0 	.word	0x200019c0
 8003e58:	200019b8 	.word	0x200019b8
 8003e5c:	200019ac 	.word	0x200019ac
 8003e60:	200019bc 	.word	0x200019bc

08003e64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d048      	beq.n	8003f08 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003e76:	2308      	movs	r3, #8
 8003e78:	425b      	negs	r3, r3
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	4b21      	ldr	r3, [pc, #132]	; (8003f10 <vPortFree+0xac>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10a      	bne.n	8003ea8 <vPortFree+0x44>
	__asm volatile
 8003e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e96:	f383 8811 	msr	BASEPRI, r3
 8003e9a:	f3bf 8f6f 	isb	sy
 8003e9e:	f3bf 8f4f 	dsb	sy
 8003ea2:	60fb      	str	r3, [r7, #12]
}
 8003ea4:	bf00      	nop
 8003ea6:	e7fe      	b.n	8003ea6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00a      	beq.n	8003ec6 <vPortFree+0x62>
	__asm volatile
 8003eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb4:	f383 8811 	msr	BASEPRI, r3
 8003eb8:	f3bf 8f6f 	isb	sy
 8003ebc:	f3bf 8f4f 	dsb	sy
 8003ec0:	60bb      	str	r3, [r7, #8]
}
 8003ec2:	bf00      	nop
 8003ec4:	e7fe      	b.n	8003ec4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	4b11      	ldr	r3, [pc, #68]	; (8003f10 <vPortFree+0xac>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d019      	beq.n	8003f08 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d115      	bne.n	8003f08 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <vPortFree+0xac>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	401a      	ands	r2, r3
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003eec:	f7fe fd2e 	bl	800294c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	4b07      	ldr	r3, [pc, #28]	; (8003f14 <vPortFree+0xb0>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4413      	add	r3, r2
 8003efa:	4a06      	ldr	r2, [pc, #24]	; (8003f14 <vPortFree+0xb0>)
 8003efc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003efe:	6938      	ldr	r0, [r7, #16]
 8003f00:	f000 f86c 	bl	8003fdc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003f04:	f7fe fd30 	bl	8002968 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003f08:	bf00      	nop
 8003f0a:	3718      	adds	r7, #24
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	200019c0 	.word	0x200019c0
 8003f14:	200019b8 	.word	0x200019b8

08003f18 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003f1e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003f22:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003f24:	4b27      	ldr	r3, [pc, #156]	; (8003fc4 <prvHeapInit+0xac>)
 8003f26:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00c      	beq.n	8003f4c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	3307      	adds	r3, #7
 8003f36:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f023 0307 	bic.w	r3, r3, #7
 8003f3e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	4a1f      	ldr	r2, [pc, #124]	; (8003fc4 <prvHeapInit+0xac>)
 8003f48:	4413      	add	r3, r2
 8003f4a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003f50:	4a1d      	ldr	r2, [pc, #116]	; (8003fc8 <prvHeapInit+0xb0>)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003f56:	4b1c      	ldr	r3, [pc, #112]	; (8003fc8 <prvHeapInit+0xb0>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	4413      	add	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003f64:	2208      	movs	r2, #8
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	1a9b      	subs	r3, r3, r2
 8003f6a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f023 0307 	bic.w	r3, r3, #7
 8003f72:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4a15      	ldr	r2, [pc, #84]	; (8003fcc <prvHeapInit+0xb4>)
 8003f78:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003f7a:	4b14      	ldr	r3, [pc, #80]	; (8003fcc <prvHeapInit+0xb4>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003f82:	4b12      	ldr	r3, [pc, #72]	; (8003fcc <prvHeapInit+0xb4>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	1ad2      	subs	r2, r2, r3
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003f98:	4b0c      	ldr	r3, [pc, #48]	; (8003fcc <prvHeapInit+0xb4>)
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	4a0a      	ldr	r2, [pc, #40]	; (8003fd0 <prvHeapInit+0xb8>)
 8003fa6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	4a09      	ldr	r2, [pc, #36]	; (8003fd4 <prvHeapInit+0xbc>)
 8003fae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003fb0:	4b09      	ldr	r3, [pc, #36]	; (8003fd8 <prvHeapInit+0xc0>)
 8003fb2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003fb6:	601a      	str	r2, [r3, #0]
}
 8003fb8:	bf00      	nop
 8003fba:	3714      	adds	r7, #20
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bc80      	pop	{r7}
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	20000dac 	.word	0x20000dac
 8003fc8:	200019ac 	.word	0x200019ac
 8003fcc:	200019b4 	.word	0x200019b4
 8003fd0:	200019bc 	.word	0x200019bc
 8003fd4:	200019b8 	.word	0x200019b8
 8003fd8:	200019c0 	.word	0x200019c0

08003fdc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003fe4:	4b27      	ldr	r3, [pc, #156]	; (8004084 <prvInsertBlockIntoFreeList+0xa8>)
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	e002      	b.n	8003ff0 <prvInsertBlockIntoFreeList+0x14>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	60fb      	str	r3, [r7, #12]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d8f7      	bhi.n	8003fea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	4413      	add	r3, r2
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	429a      	cmp	r2, r3
 800400a:	d108      	bne.n	800401e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	441a      	add	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	441a      	add	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	429a      	cmp	r2, r3
 8004030:	d118      	bne.n	8004064 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	4b14      	ldr	r3, [pc, #80]	; (8004088 <prvInsertBlockIntoFreeList+0xac>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	429a      	cmp	r2, r3
 800403c:	d00d      	beq.n	800405a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	441a      	add	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	e008      	b.n	800406c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800405a:	4b0b      	ldr	r3, [pc, #44]	; (8004088 <prvInsertBlockIntoFreeList+0xac>)
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	e003      	b.n	800406c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	429a      	cmp	r2, r3
 8004072:	d002      	beq.n	800407a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800407a:	bf00      	nop
 800407c:	3714      	adds	r7, #20
 800407e:	46bd      	mov	sp, r7
 8004080:	bc80      	pop	{r7}
 8004082:	4770      	bx	lr
 8004084:	200019ac 	.word	0x200019ac
 8004088:	200019b4 	.word	0x200019b4

0800408c <__libc_init_array>:
 800408c:	b570      	push	{r4, r5, r6, lr}
 800408e:	2600      	movs	r6, #0
 8004090:	4d0c      	ldr	r5, [pc, #48]	; (80040c4 <__libc_init_array+0x38>)
 8004092:	4c0d      	ldr	r4, [pc, #52]	; (80040c8 <__libc_init_array+0x3c>)
 8004094:	1b64      	subs	r4, r4, r5
 8004096:	10a4      	asrs	r4, r4, #2
 8004098:	42a6      	cmp	r6, r4
 800409a:	d109      	bne.n	80040b0 <__libc_init_array+0x24>
 800409c:	f000 f830 	bl	8004100 <_init>
 80040a0:	2600      	movs	r6, #0
 80040a2:	4d0a      	ldr	r5, [pc, #40]	; (80040cc <__libc_init_array+0x40>)
 80040a4:	4c0a      	ldr	r4, [pc, #40]	; (80040d0 <__libc_init_array+0x44>)
 80040a6:	1b64      	subs	r4, r4, r5
 80040a8:	10a4      	asrs	r4, r4, #2
 80040aa:	42a6      	cmp	r6, r4
 80040ac:	d105      	bne.n	80040ba <__libc_init_array+0x2e>
 80040ae:	bd70      	pop	{r4, r5, r6, pc}
 80040b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80040b4:	4798      	blx	r3
 80040b6:	3601      	adds	r6, #1
 80040b8:	e7ee      	b.n	8004098 <__libc_init_array+0xc>
 80040ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80040be:	4798      	blx	r3
 80040c0:	3601      	adds	r6, #1
 80040c2:	e7f2      	b.n	80040aa <__libc_init_array+0x1e>
 80040c4:	08004184 	.word	0x08004184
 80040c8:	08004184 	.word	0x08004184
 80040cc:	08004184 	.word	0x08004184
 80040d0:	08004188 	.word	0x08004188

080040d4 <memcpy>:
 80040d4:	440a      	add	r2, r1
 80040d6:	4291      	cmp	r1, r2
 80040d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80040dc:	d100      	bne.n	80040e0 <memcpy+0xc>
 80040de:	4770      	bx	lr
 80040e0:	b510      	push	{r4, lr}
 80040e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040e6:	4291      	cmp	r1, r2
 80040e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040ec:	d1f9      	bne.n	80040e2 <memcpy+0xe>
 80040ee:	bd10      	pop	{r4, pc}

080040f0 <memset>:
 80040f0:	4603      	mov	r3, r0
 80040f2:	4402      	add	r2, r0
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d100      	bne.n	80040fa <memset+0xa>
 80040f8:	4770      	bx	lr
 80040fa:	f803 1b01 	strb.w	r1, [r3], #1
 80040fe:	e7f9      	b.n	80040f4 <memset+0x4>

08004100 <_init>:
 8004100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004102:	bf00      	nop
 8004104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004106:	bc08      	pop	{r3}
 8004108:	469e      	mov	lr, r3
 800410a:	4770      	bx	lr

0800410c <_fini>:
 800410c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800410e:	bf00      	nop
 8004110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004112:	bc08      	pop	{r3}
 8004114:	469e      	mov	lr, r3
 8004116:	4770      	bx	lr
